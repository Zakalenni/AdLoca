import os
import logging
from datetime import datetime
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=os.getenv('BOT_TOKEN'))
dp = Dispatcher()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class AdminStates(StatesGroup):
    WAITING_NEW_TASK = State()
    WAITING_USER_SELECTION = State()
    WAITING_WORK_ASSIGNMENT = State()
    WAITING_QUANTITY = State()

class UserStates(StatesGroup):
    WAITING_PROGRESS_REPORT = State()
    WAITING_QUANTITY_REPORT = State()
    WAITING_ADDITIONAL_WORK = State()

# –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
reports_db = {}
tasks_db = {}
allowed_users = set()
work_types = [
    "–†–∞—Å–ø–∏–ª –¥–æ—Å–∫–∏", "–§—É–≥–æ–≤–∞–Ω–∏–µ", "–†–µ–π—Å–º—É—Å–æ–≤–∞–Ω–∏–µ", "–†–∞—Å–ø–∏–ª –Ω–∞ –¥–µ—Ç–∞–ª–∏",
    "–û—Ç–≤–µ—Ä—Å—Ç–∏—è –≤ –ø–ª–∞—Å—Ç—å", "–ü—Ä–∏—Å–∞–¥–∫–∞ –æ—Ç–≤–µ—Ä—Å—Ç–∏–π", "–§—Ä–µ–∑–µ—Ä–æ–≤–∫–∞ –ø–∞–∑–æ–≤",
    "–§—Ä–µ–∑–µ—Ä–æ–≤–∫–∞ —É–≥–ª–æ–≤", "–®–ª–∏—Ñ–æ–≤–∫–∞", "–ü–æ–¥—Ä–µ–∑", "–°–±–æ—Ä–∫–∞", "–î–æ—à–ª–∏—Ñ–æ–≤–∫–∞",
    "–ü–æ–∫—Ä–∞—Å–∫–∞ –∫–∞—Ä–∫–∞—Å–æ–≤", "–ü–æ–∫—Ä–∞—Å–∫–∞ –Ω–æ–∂–µ–∫", "–ü–æ–∫—Ä–∞—Å–∫–∞ —Ä—É—á–µ–∫",
    "–†–µ–∑ –Ω–∞ –∫–æ—Ä–æ–±–∫–∏", "–°–±–æ—Ä–∫–∞ –∫–æ—Ä–æ–±–æ–∫", "–£–ø–∞–∫–æ–≤–∫–∞",
    "–§—Ä–µ–∑–µ—Ä–æ–≤–∫–∞ –ø–∞–∑–æ–≤ —Ä—É—á–µ–∫", "–†–∞—Å–ø–∏–ª –Ω–∞ —Ä—É—á–∫–∏"
]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
if os.getenv('ADMIN_ID'):
    allowed_users.add(int(os.getenv('ADMIN_ID')))

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def get_current_date():
    return datetime.now().strftime("%d.%m.%Y")

def get_weekday():
    days = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
    return days[datetime.now().weekday()]

def get_work_type_kb():
    builder = ReplyKeyboardBuilder()
    for work in work_types:
        builder.add(types.KeyboardButton(text=work))
    builder.adjust(3)
    return builder.as_markup(resize_keyboard=True)

def get_progress_kb():
    builder = ReplyKeyboardBuilder()
    for i in range(0, 101, 10):
        builder.add(types.KeyboardButton(text=f"{i}%"))
    builder.adjust(5)
    return builder.as_markup(resize_keyboard=True)

def get_quantity_kb():
    builder = ReplyKeyboardBuilder()
    for i in [1, 2, 5, 10, 20, 50, 100]:
        builder.add(types.KeyboardButton(text=str(i)))
    builder.add(types.KeyboardButton(text="–î—Ä—É–≥–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ"))
    builder.adjust(3)
    return builder.as_markup(resize_keyboard=True)

def get_admin_kb():
    builder = ReplyKeyboardBuilder()
    builder.add(types.KeyboardButton(text="/new_task"))
    builder.add(types.KeyboardButton(text="/admin_report"))
    builder.add(types.KeyboardButton(text="/manage_users"))
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)

def get_user_kb():
    builder = ReplyKeyboardBuilder()
    builder.add(types.KeyboardButton(text="/new_report"))
    builder.add(types.KeyboardButton(text="/my_reports"))
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)

async def delete_previous_message(message: types.Message):
    try:
        await message.delete()
    except:
        pass

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
@dp.message(CommandStart())
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    user_id = message.from_user.id
    
    if user_id in allowed_users:
        await message.answer(
            "üë®‚Äçüíª <b>–†–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>",
            reply_markup=get_admin_kb(),
            parse_mode="HTML"
        )
    else:
        await message.answer(
            "üë∑ <b>–°–∏—Å—Ç–µ–º–∞ —É—á–µ—Ç–∞ —Ä–∞–±–æ—Ç</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /new_report –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞",
            reply_markup=get_user_kb(),
            parse_mode="HTML"
        )

# --- –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã ---
@dp.message(Command("new_task"), F.from_user.id.in_(allowed_users))
async def cmd_new_task(message: types.Message, state: FSMContext):
    await delete_previous_message(message)
    await state.set_state(AdminStates.WAITING_NEW_TASK)
    await message.answer(
        "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏:",
        reply_markup=types.ReplyKeyboardRemove()
    )

@dp.message(AdminStates.WAITING_NEW_TASK)
async def process_new_task(message: types.Message, state: FSMContext):
    await state.update_data(task_name=message.text)
    await state.set_state(AdminStates.WAITING_WORK_ASSIGNMENT)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ —Ä–∞–±–æ—Ç—ã:",
        reply_markup=get_work_type_kb()
    )

@dp.message(AdminStates.WAITING_WORK_ASSIGNMENT)
async def process_work_assignment(message: types.Message, state: FSMContext):
    if message.text not in work_types:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ —Ä–∞–±–æ—Ç—ã –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö")
        return
    
    await state.update_data(work_type=message.text)
    await state.set_state(AdminStates.WAITING_QUANTITY)
    await message.answer(
        "–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:",
        reply_markup=get_quantity_kb()
    )

@dp.message(AdminStates.WAITING_QUANTITY)
async def process_quantity(message: types.Message, state: FSMContext):
    try:
        quantity = int(message.text)
    except:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
        return
    
    data = await state.get_data()
    task_name = data['task_name']
    work_type = data['work_type']
    
    if task_name not in tasks_db:
        tasks_db[task_name] = {}
    
    tasks_db[task_name][work_type] = quantity
    
    await state.clear()
    await message.answer(
        f"‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞:\n\n"
        f"<b>{task_name}</b>\n"
        f"üîß {work_type}\n"
        f"üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}",
        reply_markup=get_admin_kb(),
        parse_mode="HTML"
    )

@dp.message(Command("admin_report"), F.from_user.id.in_(allowed_users))
async def cmd_admin_report(message: types.Message):
    report = generate_admin_report()
    await delete_previous_message(message)
    await message.answer(
        report,
        parse_mode="HTML",
        reply_markup=get_admin_kb()
    )

@dp.message(Command("manage_users"), F.from_user.id.in_(allowed_users))
async def cmd_manage_users(message: types.Message, state: FSMContext):
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        callback_data="add_user"
    ))
    builder.add(types.InlineKeyboardButton(
        text="–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        callback_data="remove_user"
    ))
    await message.answer(
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:",
        reply_markup=builder.as_markup()
    )

# --- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã ---
@dp.message(Command("new_report"))
async def cmd_new_report(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if user_id not in allowed_users:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")
        return
    
    await delete_previous_message(message)
    await state.set_state(UserStates.WAITING_PROGRESS_REPORT)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ —Ä–∞–±–æ—Ç—ã:",
        reply_markup=get_work_type_kb()
    )

@dp.message(Command("my_reports"))
async def cmd_my_reports(message: types.Message):
    user_id = message.from_user.id
    report = generate_user_report(user_id)
    await delete_previous_message(message)
    await message.answer(
        f"üìä <b>–í–∞—à–∏ –æ—Ç—á–µ—Ç—ã</b>\n\n{report}",
        parse_mode="HTML",
        reply_markup=get_user_kb()
    )

# --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤ ---
def generate_admin_report():
    if not reports_db:
        return "üìä <b>–°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç</b>\n\n–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞—Ö"
    
    report = ["üìä <b>–°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç</b>\n"]
    current_date = get_current_date()
    
    for user_id, user_data in reports_db.items():
        if current_date in user_data:
            report.append(f"\nüë§ <b>{user_data.get('name', f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}')}</b>")
            for record in user_data[current_date]:
                report.append(
                    f"  ‚Ä¢ {record['work_type']}: {record['progress']}% "
                    f"({record.get('quantity', 'N/A')} —à—Ç.)"
                )
    
    return "\n".join(report)

def generate_user_report(user_id):
    if user_id not in reports_db or not reports_db[user_id]:
        return "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç—á–µ—Ç–æ–≤"
    
    report = ["üìä <b>–í–∞—à–∏ –æ—Ç—á–µ—Ç—ã</b>\n"]
    for date, records in reports_db[user_id].items():
        if date == "name":
            continue
        report.append(f"\nüìÖ {date}")
        for record in records:
            report.append(
                f"  ‚Ä¢ {record['work_type']}: {record['progress']}% "
                f"({record.get('quantity', 'N/A')} —à—Ç.)"
            )
    
    return "\n".join(report)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
@dp.message(UserStates.WAITING_PROGRESS_REPORT)
async def process_work_type_report(message: types.Message, state: FSMContext):
    if message.text not in work_types:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ —Ä–∞–±–æ—Ç—ã –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö")
        return
    
    await state.update_data(work_type=message.text)
    await state.set_state(UserStates.WAITING_QUANTITY_REPORT)
    await message.answer(
        "–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ:",
        reply_markup=get_quantity_kb()
    )

@dp.message(UserStates.WAITING_QUANTITY_REPORT)
async def process_quantity_report(message: types.Message, state: FSMContext):
    try:
        quantity = int(message.text)
    except:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
        return
    
    await state.update_data(quantity=quantity)
    await state.set_state(UserStates.WAITING_PROGRESS_REPORT)
    await message.answer(
        "–£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:",
        reply_markup=get_progress_kb()
    )

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
