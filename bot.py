import os
import logging
import ssl
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from dotenv import load_dotenv
import asyncpg
from typing import Dict, List, Optional

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=os.getenv('BOT_TOKEN'))
dp = Dispatcher()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class AdminStates(StatesGroup):
    WAITING_TASK_DESCRIPTION = State()
    WAITING_WORK_TYPE = State()
    WAITING_QUANTITY = State()
    WAITING_USER_MANAGEMENT = State()

class UserStates(StatesGroup):
    WAITING_WORK_SELECTION = State()
    WAITING_QUANTITY_DONE = State()

# –¢–∏–ø—ã —Ä–∞–±–æ—Ç
WORK_TYPES = [
    "–†–∞—Å–ø–∏–ª –¥–æ—Å–∫–∏", "–§—É–≥–æ–≤–∞–Ω–∏–µ", "–†–µ–π—Å–º—É—Å–æ–≤–∞–Ω–∏–µ", "–†–∞—Å–ø–∏–ª –Ω–∞ –¥–µ—Ç–∞–ª–∏",
    "–û—Ç–≤–µ—Ä—Å—Ç–∏—è –≤ –ø–ª–∞—Å—Ç—å", "–ü—Ä–∏—Å–∞–¥–∫–∞ –æ—Ç–≤–µ—Ä—Å—Ç–∏–π", "–§—Ä–µ–∑–µ—Ä–æ–≤–∫–∞ –ø–∞–∑–æ–≤",
    "–§—Ä–µ–∑–µ—Ä–æ–≤–∫–∞ —É–≥–ª–æ–≤", "–®–ª–∏—Ñ–æ–≤–∫–∞", "–ü–æ–¥—Ä–µ–∑", "–°–±–æ—Ä–∫–∞", "–î–æ—à–ª–∏—Ñ–æ–≤–∫–∞",
    "–ü–æ–∫—Ä–∞—Å–∫–∞ –∫–∞—Ä–∫–∞—Å–æ–≤", "–ü–æ–∫—Ä–∞—Å–∫–∞ –Ω–æ–∂–µ–∫", "–ü–æ–∫—Ä–∞—Å–∫–∞ —Ä—É—á–µ–∫",
    "–†–µ–∑ –Ω–∞ –∫–æ—Ä–æ–±–∫–∏", "–°–±–æ—Ä–∫–∞ –∫–æ—Ä–æ–±–æ–∫", "–£–ø–∞–∫–æ–≤–∫–∞", "–§—Ä–µ–∑–µ—Ä–æ–≤–∫–∞ –ø–∞–∑–æ–≤ —Ä—É—á–µ–∫",
    "–†–∞—Å–ø–∏–ª –Ω–∞ —Ä—É—á–∫–∏"
]

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —Å SSL
async def create_db_connection():
    ssl_ctx = ssl.create_default_context()
    ssl_ctx.check_hostname = False
    ssl_ctx.verify_mode = ssl.CERT_NONE

    return await asyncpg.connect(
        host=os.getenv('DB_HOST'),
        port=os.getenv('DB_PORT'),
        user=os.getenv('DB_USER'),
        password=os.getenv('DB_PASSWORD'),
        database=os.getenv('DB_NAME'),
        ssl=ssl_ctx
    )

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async def init_db():
    conn = await create_db_connection()
    try:
        await conn.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id BIGINT PRIMARY KEY,
                username TEXT,
                full_name TEXT,
                is_active BOOLEAN DEFAULT TRUE,
                is_admin BOOLEAN DEFAULT FALSE
            )
        ''')

        await conn.execute('''
            CREATE TABLE IF NOT EXISTS weekly_tasks (
                task_id SERIAL PRIMARY KEY,
                admin_id BIGINT,
                description TEXT,
                total_quantity INTEGER,
                created_at TIMESTAMP DEFAULT NOW(),
                week_number INTEGER,
                year INTEGER
            )
        ''')

        await conn.execute('''
            CREATE TABLE IF NOT EXISTS work_types (
                work_type_id SERIAL PRIMARY KEY,
                name TEXT UNIQUE
            )
        ''')

        await conn.execute('''
            CREATE TABLE IF NOT EXISTS daily_reports (
                report_id SERIAL PRIMARY KEY,
                user_id BIGINT,
                task_id INTEGER REFERENCES weekly_tasks(task_id),
                work_type_id INTEGER REFERENCES work_types(work_type_id),
                quantity_done INTEGER,
                report_date DATE,
                created_at TIMESTAMP DEFAULT NOW()
            )
        ''')

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø—ã —Ä–∞–±–æ—Ç, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        for work_type in WORK_TYPES:
            await conn.execute('''
                INSERT INTO work_types (name)
                VALUES ($1)
                ON CONFLICT (name) DO NOTHING
            ''', work_type)

    finally:
        await conn.close()

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
async def get_current_week() -> tuple:
    today = datetime.now()
    year, week_num, _ = today.isocalendar()
    return week_num, year

async def get_week_dates(week_num: int, year: int) -> str:
    first_day = datetime.fromisocalendar(year, week_num, 1)
    last_day = datetime.fromisocalendar(year, week_num, 7)
    return f"{first_day.strftime('%d.%m')}-{last_day.strftime('%d.%m.%Y')}"

async def delete_previous_message(message: types.Message):
    try:
        await message.delete()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

async def get_user_name(user_id: int) -> str:
    conn = await create_db_connection()
    try:
        user = await conn.fetchrow('SELECT full_name FROM users WHERE user_id = $1', user_id)
        return user['full_name'] if user else f"ID{user_id}"
    finally:
        await conn.close()

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def get_main_menu_kb(is_admin: bool = False):
    builder = ReplyKeyboardBuilder()
    builder.add(types.KeyboardButton(text="üìä –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç"))
    builder.add(types.KeyboardButton(text="üìã –ú–æ–∏ –æ—Ç—á–µ—Ç—ã"))
    if is_admin:
        builder.add(types.KeyboardButton(text="üë®‚Äçüíª –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ"))
    builder.adjust(1)
    return builder.as_markup(resize_keyboard=True)

def get_admin_menu_kb():
    builder = ReplyKeyboardBuilder()
    builder.add(types.KeyboardButton(text="üìù –ü–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É"))
    builder.add(types.KeyboardButton(text="üìà –°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç"))
    builder.add(types.KeyboardButton(text="üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"))
    builder.add(types.KeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    builder.adjust(1)
    return builder.as_markup(resize_keyboard=True)

def get_work_types_kb():
    builder = ReplyKeyboardBuilder()
    for work_type in WORK_TYPES:
        builder.add(types.KeyboardButton(text=work_type))
    builder.add(types.KeyboardButton(text="üîô –ù–∞–∑–∞–¥"))
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)

def get_back_kb():
    builder = ReplyKeyboardBuilder()
    builder.add(types.KeyboardButton(text="üîô –ù–∞–∑–∞–¥"))
    return builder.as_markup(resize_keyboard=True)

def get_user_management_kb():
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        callback_data="admin_add_user"
    ))
    builder.add(types.InlineKeyboardButton(
        text="–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        callback_data="admin_remove_user"
    ))
    builder.add(types.InlineKeyboardButton(
        text="–ù–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∞",
        callback_data="admin_promote"
    ))
    builder.add(types.InlineKeyboardButton(
        text="üîô –ù–∞–∑–∞–¥",
        callback_data="admin_back"
    ))
    builder.adjust(1)
    return builder.as_markup()

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    conn = await create_db_connection()
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
        user = await conn.fetchrow(
            'SELECT * FROM users WHERE user_id = $1', 
            message.from_user.id
        )
        
        if not user:
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
            await conn.execute(
                '''
                INSERT INTO users (user_id, username, full_name, is_active)
                VALUES ($1, $2, $3, FALSE)
                ''',
                message.from_user.id,
                message.from_user.username,
                message.from_user.full_name
            )
            await message.answer(
                "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            admin_id = os.getenv('ADMIN_ID')
            if admin_id:
                await bot.send_message(
                    admin_id,
                    f"üÜï –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:\n"
                    f"ID: {message.from_user.id}\n"
                    f"–ò–º—è: {message.from_user.full_name}\n"
                    f"Username: @{message.from_user.username}\n\n"
                    f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏."
                )
            return
        
        if not user['is_active']:
            await message.answer("‚è≥ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –µ—â–µ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        is_admin = user['is_admin']
        await message.answer(
            "üìã <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_menu_kb(is_admin),
            parse_mode="HTML"
        )
    finally:
        await conn.close()

# ... [–æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏]

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await init_db()
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
