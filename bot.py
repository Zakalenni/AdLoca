import os
import logging
from datetime import datetime
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=os.getenv('BOT_TOKEN'))
dp = Dispatcher()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ–ø—Ä–æ—Å–∞
class SurveyStates(StatesGroup):
    WAITING_TASK = State()
    WAITING_WORK_TYPE = State()
    WAITING_PROGRESS = State()
    WAITING_QUANTITY = State()
    WAITING_NEXT_ACTION = State()

# –í–∏–¥—ã —Ä–∞–±–æ—Ç
WORK_TYPES = [
    "–†–∞—Å–ø–∏–ª –¥–æ—Å–∫–∏",
    "–§—É–≥–æ–≤–∞–Ω–∏–µ",
    "–†–µ–π—Å–º—É—Å–æ–≤–∞–Ω–∏–µ",
    "–†–∞—Å–ø–∏–ª –Ω–∞ –¥–µ—Ç–∞–ª–∏",
    "–û—Ç–≤–µ—Ä—Å—Ç–∏—è –≤ –ø–ª–∞—Å—Ç—å",
    "–ü—Ä–∏—Å–∞–¥–∫–∞ –æ—Ç–≤–µ—Ä—Å—Ç–∏–π",
    "–§—Ä–µ–∑–µ—Ä–æ–≤–∫–∞ –ø–∞–∑–æ–≤",
    "–§—Ä–µ–∑–µ—Ä–æ–≤–∫–∞ —É–≥–ª–æ–≤",
    "–®–ª–∏—Ñ–æ–≤–∫–∞",
    "–ü–æ–¥—Ä–µ–∑",
    "–°–±–æ—Ä–∫–∞",
    "–î–æ—à–ª–∏—Ñ–æ–≤–∫–∞",
    "–ü–æ–∫—Ä–∞—Å–∫–∞ –∫–∞—Ä–∫–∞—Å–æ–≤",
    "–ü–æ–∫—Ä–∞—Å–∫–∞ –Ω–æ–∂–µ–∫",
    "–ü–æ–∫—Ä–∞—Å–∫–∞ —Ä—É—á–µ–∫",
    "–†–µ–∑ –Ω–∞ –∫–æ—Ä–æ–±–∫–∏",
    "–°–±–æ—Ä–∫–∞ –∫–æ—Ä–æ–±–æ–∫",
    "–£–ø–∞–∫–æ–≤–∫–∞",
    "–§—Ä–µ–∑–µ—Ä–æ–≤–∫–∞ –ø–∞–∑–æ–≤ —Ä—É—á–µ–∫",
    "–†–∞—Å–ø–∏–ª –Ω–∞ —Ä—É—á–∫–∏"
]

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤
reports_db = {}
user_current_reports = {}  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –æ—Ç—á–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
async def delete_previous_messages(chat_id: int, message_ids: list):
    """–£–¥–∞–ª—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    for msg_id in message_ids:
        try:
            await bot.delete_message(chat_id=chat_id, message_id=msg_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

def get_current_weekday():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏"""
    days = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
    return days[datetime.now().weekday()]

def generate_user_report(user_id: int) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    if user_id not in reports_db or not reports_db[user_id]:
        return "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤"
    
    report = ["üìä <b>–í–∞—à–∏ –æ—Ç—á–µ—Ç—ã</b>\n"]
    for date, records in reports_db[user_id].items():
        report.append(f"\nüìÖ <b>{date}</b>")
        for i, record in enumerate(records, 1):
            report.append(
                f"\n{i}. {record['work_type']}\n"
                f"   - –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {record['progress']}%\n"
                f"   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {record.get('quantity', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                f"   - –ó–∞–¥–∞—á–∞: {record['task']}"
            )
    
    return "\n".join(report)

def generate_admin_report():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if not reports_db:
        return "üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é —Ä–∞–±–æ—Ç"
    
    report = ["üìà <b>–°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é —Ä–∞–±–æ—Ç</b>\n"]
    
    for user_id, user_data in reports_db.items():
        report.append(f"\nüë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {user_id}</b>")
        for date, records in user_data.items():
            report.append(f"\n  üìÖ {date}")
            for record in records:
                report.append(
                    f"    ‚Ä¢ {record['work_type']}: {record['progress']}% "
                    f"(–∫–æ–ª-–≤–æ: {record.get('quantity', '–Ω/—É')})"
                )
    
    return "\n".join(report)

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def get_main_menu_kb():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    builder = ReplyKeyboardBuilder()
    builder.add(types.KeyboardButton(text="üìù –ù–æ–≤—ã–π –æ—Ç—á–µ—Ç"))
    builder.add(types.KeyboardButton(text="üìä –ú–æ–∏ –æ—Ç—á–µ—Ç—ã"))
    builder.add(types.KeyboardButton(text="üõ† –î–æ–±–∞–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É"))
    builder.add(types.KeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ç—á–µ—Ç"))
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)

def get_work_types_kb():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Ç–∏–ø–∞–º–∏ —Ä–∞–±–æ—Ç"""
    builder = ReplyKeyboardBuilder()
    for work_type in WORK_TYPES:
        builder.add(types.KeyboardButton(text=work_type))
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)

def get_progress_kb():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
    builder = ReplyKeyboardBuilder()
    for i in range(0, 101, 10):
        builder.add(types.KeyboardButton(text=f"{i}%"))
    builder.adjust(5)
    return builder.as_markup(resize_keyboard=True)

def get_quantity_kb():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º"""
    builder = ReplyKeyboardBuilder()
    builder.add(types.KeyboardButton(text="1"))
    builder.add(types.KeyboardButton(text="2"))
    builder.add(types.KeyboardButton(text="5"))
    builder.add(types.KeyboardButton(text="10"))
    builder.add(types.KeyboardButton(text="–î—Ä—É–≥–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ"))
    builder.adjust(3)
    return builder.as_markup(resize_keyboard=True)

def get_next_action_kb():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
    builder = ReplyKeyboardBuilder()
    builder.add(types.KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ä–∞–±–æ—Ç—É"))
    builder.add(types.KeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ç—á–µ—Ç"))
    builder.adjust(1)
    return builder.as_markup(resize_keyboard=True)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    msg = await message.answer(
        "üîß <b>–°–∏—Å—Ç–µ–º–∞ —É—á–µ—Ç–∞ —Å—Ç–æ–ª—è—Ä–Ω—ã—Ö —Ä–∞–±–æ—Ç</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode="HTML",
        reply_markup=get_main_menu_kb()
    )
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    await state.update_data(last_message_id=msg.message_id)

@dp.message(F.text == "üìù –ù–æ–≤—ã–π –æ—Ç—á–µ—Ç")
async def cmd_new_report(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    await delete_previous_messages(message.chat.id, [user_data.get('last_message_id'), message.message_id])
    
    await state.set_state(SurveyStates.WAITING_TASK)
    msg = await message.answer(
        "üìù <b>–ù–æ–≤—ã–π –æ—Ç—á–µ—Ç</b>\n\n"
        "–û–ø–∏—à–∏—Ç–µ –æ–±—â—É—é –∑–∞–¥–∞—á—É, –Ω–∞–¥ –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ:",
        parse_mode="HTML",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await state.update_data(last_message_id=msg.message_id)

@dp.message(F.text == "üìä –ú–æ–∏ –æ—Ç—á–µ—Ç—ã")
async def cmd_my_reports(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    await delete_previous_messages(message.chat.id, [user_data.get('last_message_id'), message.message_id])
    
    report = generate_user_report(message.from_user.id)
    msg = await message.answer(
        report,
        parse_mode="HTML",
        reply_markup=get_main_menu_kb()
    )
    await state.update_data(last_message_id=msg.message_id)

@dp.message(F.text == "üõ† –î–æ–±–∞–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É")
async def cmd_add_work(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    await delete_previous_messages(message.chat.id, [user_data.get('last_message_id'), message.message_id])
    
    if 'task' not in user_data:
        await state.set_state(SurveyStates.WAITING_TASK)
        msg = await message.answer(
            "–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç —Å –æ–±—â–µ–π –∑–∞–¥–∞—á–µ–π",
            reply_markup=types.ReplyKeyboardRemove()
        )
    else:
        await state.set_state(SurveyStates.WAITING_WORK_TYPE)
        msg = await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ —Ä–∞–±–æ—Ç—ã:",
            reply_markup=get_work_types_kb()
        )
    await state.update_data(last_message_id=msg.message_id)

@dp.message(F.text == "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ç—á–µ—Ç")
async def cmd_finish_report(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    await delete_previous_messages(message.chat.id, [user_data.get('last_message_id'), message.message_id])
    
    user_id = message.from_user.id
    if user_id in user_current_reports and user_current_reports[user_id]:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –æ—Ç—á–µ—Ç
        current_date = datetime.now().strftime("%d.%m.%Y")
        if user_id not in reports_db:
            reports_db[user_id] = {}
        reports_db[user_id][current_date] = user_current_reports[user_id]
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        report = generate_user_report(user_id)
        msg = await message.answer(
            f"‚úÖ <b>–û—Ç—á–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω</b>\n\n{report}",
            parse_mode="HTML",
            reply_markup=get_main_menu_kb()
        )
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        user_current_reports.pop(user_id, None)
        await state.clear()
        await state.update_data(last_message_id=msg.message_id)
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        admin_id = os.getenv('ADMIN_ID')
        if admin_id:
            try:
                await bot.send_message(
                    chat_id=int(admin_id),
                    text=f"üìå –ù–æ–≤—ã–π –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –æ—Ç—á–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.full_name}\n\n{report}",
                    parse_mode="HTML"
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")
    else:
        msg = await message.answer(
            "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è",
            reply_markup=get_main_menu_kb()
        )
        await state.update_data(last_message_id=msg.message_id)

@dp.message(Command("admin_report"), F.from_user.id == int(os.getenv('ADMIN_ID')))
async def cmd_admin_report(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    await delete_previous_messages(message.chat.id, [user_data.get('last_message_id'), message.message_id])
    
    report = generate_admin_report()
    msg = await message.answer(report, parse_mode="HTML")
    await state.update_data(last_message_id=msg.message_id)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π ---
@dp.message(SurveyStates.WAITING_TASK)
async def process_task(message: types.Message, state: FSMContext):
    await state.update_data(task=message.text)
    await state.set_state(SurveyStates.WAITING_WORK_TYPE)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ—Ç—á–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_current_reports[message.from_user.id] = []
    
    msg = await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ —Ä–∞–±–æ—Ç—ã:",
        reply_markup=get_work_types_kb()
    )
    await state.update_data(last_message_id=msg.message_id)

@dp.message(SurveyStates.WAITING_WORK_TYPE)
async def process_work_type(message: types.Message, state: FSMContext):
    if message.text not in WORK_TYPES:
        msg = await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ —Ä–∞–±–æ—Ç—ã –∏–∑ —Å–ø–∏—Å–∫–∞")
        await state.update_data(last_message_id=msg.message_id)
        return
    
    await state.update_data(work_type=message.text)
    await state.set_state(SurveyStates.WAITING_PROGRESS)
    
    msg = await message.answer(
        "–£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:",
        reply_markup=get_progress_kb()
    )
    await state.update_data(last_message_id=msg.message_id)

@dp.message(SurveyStates.WAITING_PROGRESS)
async def process_progress(message: types.Message, state: FSMContext):
    try:
        progress = int(message.text.replace("%", ""))
        if not 0 <= progress <= 100:
            raise ValueError
    except ValueError:
        msg = await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç 0 –¥–æ 100")
        await state.update_data(last_message_id=msg.message_id)
        return
    
    await state.update_data(progress=progress)
    await state.set_state(SurveyStates.WAITING_QUANTITY)
    
    msg = await message.answer(
        "–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü:",
        reply_markup=get_quantity_kb()
    )
    await state.update_data(last_message_id=msg.message_id)

@dp.message(SurveyStates.WAITING_QUANTITY)
async def process_quantity(message: types.Message, state: FSMContext):
    quantity = message.text if message.text != "–î—Ä—É–≥–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ" else None
    
    if quantity and not quantity.isdigit():
        msg = await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ")
        await state.update_data(last_message_id=msg.message_id)
        return
    
    data = await state.get_data()
    work_data = {
        "task": data["task"],
        "work_type": data["work_type"],
        "progress": data["progress"],
        "quantity": quantity if quantity else "–Ω–µ —É–∫–∞–∑–∞–Ω–æ",
        "weekday": get_current_weekday()
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–±–æ—Ç—É –≤ —Ç–µ–∫—É—â–∏–π –æ—Ç—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_current_reports[message.from_user.id].append(work_data)
    
    await state.set_state(SurveyStates.WAITING_NEXT_ACTION)
    
    msg = await message.answer(
        f"‚úÖ <b>–†–∞–±–æ—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—Ç—á–µ—Ç</b>\n\n"
        f"üîß –í–∏–¥ —Ä–∞–±–æ—Ç—ã: {data['work_type']}\n"
        f"üìä –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {data['progress']}%\n"
        f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity if quantity else '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode="HTML",
        reply_markup=get_next_action_kb()
    )
    await state.update_data(last_message_id=msg.message_id)

@dp.message(SurveyStates.WAITING_NEXT_ACTION)
async def process_next_action(message: types.Message, state: FSMContext):
    if message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ä–∞–±–æ—Ç—É":
        await state.set_state(SurveyStates.WAITING_WORK_TYPE)
        msg = await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ —Ä–∞–±–æ—Ç—ã:",
            reply_markup=get_work_types_kb()
        )
    elif message.text == "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ç—á–µ—Ç":
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        user_id = message.from_user.id
        current_date = datetime.now().strftime("%d.%m.%Y")
        
        if user_id not in reports_db:
            reports_db[user_id] = {}
        reports_db[user_id][current_date] = user_current_reports[user_id]
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        report = generate_user_report(user_id)
        msg = await message.answer(
            f"‚úÖ <b>–û—Ç—á–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω</b>\n\n{report}",
            parse_mode="HTML",
            reply_markup=get_main_menu_kb()
        )
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        user_current_reports.pop(user_id, None)
        await state.clear()
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        admin_id = os.getenv('ADMIN_ID')
        if admin_id:
            try:
                await bot.send_message(
                    chat_id=int(admin_id),
                    text=f"üìå –ù–æ–≤—ã–π –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –æ—Ç—á–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.full_name}\n\n{report}",
                    parse_mode="HTML"
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")
    else:
        msg = await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö",
            reply_markup=get_next_action_kb()
        )
    
    await state.update_data(last_message_id=msg.message_id)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
