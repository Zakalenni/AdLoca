import os
import logging
from datetime import datetime
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=os.getenv('BOT_TOKEN'))
dp = Dispatcher()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ–ø—Ä–æ—Å–∞
class SurveyStates(StatesGroup):
    WAITING_TASK = State()
    WAITING_WORK_TYPE = State()
    WAITING_PROGRESS = State()
    WAITING_QUANTITY = State()
    WAITING_ADDITIONAL_WORK = State()

class AdminStates(StatesGroup):
    WAITING_TASK_ASSIGNMENT = State()
    WAITING_WORKER_SELECTION = State()
    WAITING_USER_MANAGEMENT = State()

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
reports_db = {}
tasks_db = {}
allowed_users = set()
admin_users = {int(os.getenv('ADMIN_ID'))} if os.getenv('ADMIN_ID') else set()

# –í–∏–¥—ã —Ä–∞–±–æ—Ç
WORK_TYPES = [
    "–†–∞—Å–ø–∏–ª –¥–æ—Å–∫–∏", "–§—É–≥–æ–≤–∞–Ω–∏–µ", "–†–µ–π—Å–º—É—Å–æ–≤–∞–Ω–∏–µ", "–†–∞—Å–ø–∏–ª –Ω–∞ –¥–µ—Ç–∞–ª–∏",
    "–û—Ç–≤–µ—Ä—Å—Ç–∏—è –≤ –ø–ª–∞—Å—Ç—å", "–ü—Ä–∏—Å–∞–¥–∫–∞ –æ—Ç–≤–µ—Ä—Å—Ç–∏–π", "–§—Ä–µ–∑–µ—Ä–æ–≤–∫–∞ –ø–∞–∑–æ–≤",
    "–§—Ä–µ–∑–µ—Ä–æ–≤–∫–∞ —É–≥–ª–æ–≤", "–®–ª–∏—Ñ–æ–≤–∫–∞", "–ü–æ–¥—Ä–µ–∑", "–°–±–æ—Ä–∫–∞", "–î–æ—à–ª–∏—Ñ–æ–≤–∫–∞",
    "–ü–æ–∫—Ä–∞—Å–∫–∞ –∫–∞—Ä–∫–∞—Å–æ–≤", "–ü–æ–∫—Ä–∞—Å–∫–∞ –Ω–æ–∂–µ–∫", "–ü–æ–∫—Ä–∞—Å–∫–∞ —Ä—É—á–µ–∫",
    "–†–µ–∑ –Ω–∞ –∫–æ—Ä–æ–±–∫–∏", "–°–±–æ—Ä–∫–∞ –∫–æ—Ä–æ–±–æ–∫", "–£–ø–∞–∫–æ–≤–∫–∞", 
    "–§—Ä–µ–∑–µ—Ä–æ–≤–∫–∞ –ø–∞–∑–æ–≤ —Ä—É—á–µ–∫", "–†–∞—Å–ø–∏–ª –Ω–∞ —Ä—É—á–∫–∏"
]

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def get_current_weekday():
    days = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
    return days[datetime.now().weekday()]

def generate_user_report(user_id: int, username: str) -> str:
    if user_id not in reports_db or not reports_db[user_id]:
        return "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç—á–µ—Ç–æ–≤"
    
    report = [f"üìä <b>–û—Ç—á–µ—Ç—ã {username}</b>\n"]
    for date, records in reports_db[user_id].items():
        report.append(f"\nüìÖ <b>{date}</b>")
        for record in records:
            report.append(
                f"  ‚Ä¢ {record['work_type']}: {record['progress']}% ({record.get('quantity', 'N/A')} —à—Ç.)"
            )
    return "\n".join(report)

def generate_admin_report():
    if not reports_db:
        return "üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é —Ä–∞–±–æ—Ç"
    
    report = ["üìà <b>–°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é —Ä–∞–±–æ—Ç</b>\n"]
    for user_id, user_data in reports_db.items():
        username = next((u for u in allowed_users if u[0] == user_id), ("Unknown", ""))[1]
        report.append(f"\nüë∑ <b>{username}</b>")
        for date, records in user_data.items():
            report.append(f"\n  üìÖ {date}")
            for record in records:
                report.append(f"    ‚Ä¢ {record['work_type']}: {record['progress']}% ({record.get('quantity', 'N/A')} —à—Ç.)")
    
    return "\n".join(report)

def get_work_types_kb():
    builder = ReplyKeyboardBuilder()
    for work_type in WORK_TYPES:
        builder.add(types.KeyboardButton(text=work_type))
    builder.adjust(3)
    return builder.as_markup(resize_keyboard=True)

def get_progress_kb():
    builder = ReplyKeyboardBuilder()
    for i in range(0, 101, 10):
        builder.add(types.KeyboardButton(text=f"{i}%"))
    builder.adjust(5)
    return builder.as_markup(resize_keyboard=True)

def get_quantity_kb():
    builder = ReplyKeyboardBuilder()
    for i in [1, 5, 10, 20, 50, 100]:
        builder.add(types.KeyboardButton(text=str(i)))
    builder.add(types.KeyboardButton(text="–î—Ä—É–≥–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ"))
    builder.adjust(3)
    return builder.as_markup(resize_keyboard=True)

def get_admin_action_kb():
    builder = ReplyKeyboardBuilder()
    builder.add(types.KeyboardButton(text="–ù–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–¥–∞—á—É"))
    builder.add(types.KeyboardButton(text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"))
    builder.add(types.KeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç"))
    builder.adjust(1)
    return builder.as_markup(resize_keyboard=True)

def get_user_management_kb():
    builder = ReplyKeyboardBuilder()
    builder.add(types.KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"))
    builder.add(types.KeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"))
    builder.add(types.KeyboardButton(text="–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"))
    builder.add(types.KeyboardButton(text="–ù–∞–∑–∞–¥"))
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)

async def delete_previous_message(message: types.Message):
    try:
        await message.delete()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if user_id not in {u[0] for u in allowed_users} and user_id not in admin_users:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É")
        return
    
    await state.clear()
    await message.answer(
        "üè≠ <b>–°–∏—Å—Ç–µ–º–∞ —É—á–µ—Ç–∞ —Å—Ç–æ–ª—è—Ä–Ω—ã—Ö —Ä–∞–±–æ—Ç</b>\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/new_report - —Å–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç\n"
        "/my_reports - –≤–∞—à–∏ –æ—Ç—á–µ—Ç—ã\n"
        "/admin - –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞" if user_id in admin_users else "",
        parse_mode="HTML",
        reply_markup=types.ReplyKeyboardRemove()
    )

@dp.message(Command("admin"), F.from_user.id.in_(admin_users))
async def cmd_admin(message: types.Message, state: FSMContext):
    await delete_previous_message(message)
    await message.answer(
        "üõ† <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>",
        reply_markup=get_admin_action_kb(),
        parse_mode="HTML"
    )

@dp.message(F.text == "–ù–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–¥–∞—á—É", F.from_user.id.in_(admin_users))
async def assign_task_start(message: types.Message, state: FSMContext):
    await delete_previous_message(message)
    await state.set_state(AdminStates.WAITING_TASK_ASSIGNMENT)
    await message.answer(
        "üìù –í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:",
        reply_markup=types.ReplyKeyboardRemove()
    )

@dp.message(AdminStates.WAITING_TASK_ASSIGNMENT)
async def assign_task_description(message: types.Message, state: FSMContext):
    await state.update_data(task=message.text)
    await state.set_state(AdminStates.WAITING_WORKER_SELECTION)
    
    builder = InlineKeyboardBuilder()
    for user_id, username in allowed_users:
        builder.add(types.InlineKeyboardButton(
            text=username,
            callback_data=f"assign_{user_id}"
        ))
    builder.adjust(2)
    
    await message.answer(
        "üë• –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:",
        reply_markup=builder.as_markup()
    )

@dp.callback_query(F.data.startswith("assign_"), AdminStates.WAITING_WORKER_SELECTION)
async def assign_task_final(callback: types.CallbackQuery, state: FSMContext):
    user_id = int(callback.data.split("_")[1])
    data = await state.get_data()
    
    if user_id not in tasks_db:
        tasks_db[user_id] = []
    
    tasks_db[user_id].append({
        "task": data["task"],
        "assigned_by": callback.from_user.id,
        "date": datetime.now().strftime("%d.%m.%Y %H:%M")
    })
    
    await callback.message.edit_text(
        f"‚úÖ –ó–∞–¥–∞—á–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ —Ä–∞–±–æ—Ç–Ω–∏–∫—É {next((u[1] for u in allowed_users if u[0] == user_id), 'Unknown')}"
    )
    await bot.send_message(
        chat_id=user_id,
        text=f"üìå <b>–í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞</b>\n\n{data['task']}",
        parse_mode="HTML"
    )
    await state.clear()

@dp.message(F.text == "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", F.from_user.id.in_(admin_users))
async def manage_users_start(message: types.Message, state: FSMContext):
    await delete_previous_message(message)
    await message.answer(
        "üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</b>",
        reply_markup=get_user_management_kb(),
        parse_mode="HTML"
    )

@dp.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", F.from_user.id.in_(admin_users))
async def add_user_start(message: types.Message, state: FSMContext):
    await delete_previous_message(message)
    await state.set_state(AdminStates.WAITING_USER_MANAGEMENT)
    await state.update_data(action="add")
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∏–º—è —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: 123456789 –ò–≤–∞–Ω):",
        reply_markup=types.ReplyKeyboardRemove()
    )

@dp.message(F.text == "–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", F.from_user.id.in_(admin_users))
async def remove_user_start(message: types.Message, state: FSMContext):
    await delete_previous_message(message)
    await state.set_state(AdminStates.WAITING_USER_MANAGEMENT)
    await state.update_data(action="remove")
    
    if not allowed_users:
        await message.answer("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        await state.clear()
        return
    
    builder = InlineKeyboardBuilder()
    for user_id, username in allowed_users:
        builder.add(types.InlineKeyboardButton(
            text=f"{username} (ID: {user_id})",
            callback_data=f"user_{user_id}"
        ))
    builder.adjust(1)
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=builder.as_markup()
    )

@dp.message(F.text == "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", F.from_user.id.in_(admin_users))
async def list_users(message: types.Message):
    await delete_previous_message(message)
    if not allowed_users:
        await message.answer("–ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        return
    
    users_list = "\n".join([f"{user_id}: {username}" for user_id, username in allowed_users])
    await message.answer(f"üë• <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n{users_list}", parse_mode="HTML")

@dp.message(F.text == "–ù–∞–∑–∞–¥", F.from_user.id.in_(admin_users))
async def admin_back(message: types.Message, state: FSMContext):
    await delete_previous_message(message)
    await state.clear()
    await message.answer(
        "üõ† <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>",
        reply_markup=get_admin_action_kb(),
        parse_mode="HTML"
    )

@dp.message(AdminStates.WAITING_USER_MANAGEMENT)
async def process_user_management(message: types.Message, state: FSMContext):
    data = await state.get_data()
    action = data.get("action")
    
    if action == "add":
        try:
            parts = message.text.split()
            user_id = int(parts[0])
            username = " ".join(parts[1:])
            
            allowed_users.add((user_id, username))
            await message.answer(
                f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {user_id}) –¥–æ–±–∞–≤–ª–µ–Ω",
                reply_markup=get_user_management_kb()
            )
        except Exception as e:
            await message.answer("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞. –ü—Ä–∏–º–µ—Ä: 123456789 –ò–≤–∞–Ω")
    await state.clear()

@dp.callback_query(F.data.startswith("user_"), AdminStates.WAITING_USER_MANAGEMENT)
async def remove_user_final(callback: types.CallbackQuery, state: FSMContext):
    user_id = int(callback.data.split("_")[1])
    user_to_remove = next((u for u in allowed_users if u[0] == user_id), None)
    
    if user_to_remove:
        allowed_users.remove(user_to_remove)
        await callback.message.edit_text(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_to_remove[1]} —É–¥–∞–ª–µ–Ω"
        )
    else:
        await callback.message.edit_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    await state.clear()

@dp.message(F.text == "–ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç", F.from_user.id.in_(admin_users))
async def get_full_report(message: types.Message):
    await delete_previous_message(message)
    report = generate_admin_report()
    await message.answer(report, parse_mode="HTML")

@dp.message(Command("new_report"))
async def cmd_new_report(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if user_id not in {u[0] for u in allowed_users}:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")
        return
    
    await delete_previous_message(message)
    await state.set_state(SurveyStates.WAITING_TASK)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
    assigned_tasks = tasks_db.get(user_id, [])
    if assigned_tasks:
        tasks_text = "\n".join([f"‚Ä¢ {task['task']} ({task['date']})" for task in assigned_tasks])
        await message.answer(
            f"üìå <b>–í–∞—à–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏</b>\n\n{tasks_text}",
            parse_mode="HTML"
        )
    
    await message.answer(
        "üìù –í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á—É, –Ω–∞–¥ –∫–æ—Ç–æ—Ä–æ–π —Ä–∞–±–æ—Ç–∞–ª–∏:",
        reply_markup=types.ReplyKeyboardRemove()
    )

@dp.message(SurveyStates.WAITING_TASK)
async def process_task(message: types.Message, state: FSMContext):
    await delete_previous_message(message)
    await state.update_data(task=message.text)
    await state.set_state(SurveyStates.WAITING_WORK_TYPE)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ —Ä–∞–±–æ—Ç—ã:",
        reply_markup=get_work_types_kb()
    )

@dp.message(SurveyStates.WAITING_WORK_TYPE)
async def process_work_type(message: types.Message, state: FSMContext):
    await delete_previous_message(message)
    if message.text not in WORK_TYPES:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ —Ä–∞–±–æ—Ç—ã –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö")
        return
    
    await state.update_data(work_type=message.text)
    await state.set_state(SurveyStates.WAITING_PROGRESS)
    await message.answer(
        "–£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:",
        reply_markup=get_progress_kb()
    )

@dp.message(SurveyStates.WAITING_PROGRESS)
async def process_progress(message: types.Message, state: FSMContext):
    await delete_previous_message(message)
    try:
        progress = int(message.text.replace("%", ""))
        if not 0 <= progress <= 100:
            raise ValueError
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç 0 –¥–æ 100")
        return
    
    await state.update_data(progress=progress)
    await state.set_state(SurveyStates.WAITING_QUANTITY)
    await message.answer(
        "–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü:",
        reply_markup=get_quantity_kb()
    )

@dp.message(SurveyStates.WAITING_QUANTITY)
async def process_quantity(message: types.Message, state: FSMContext):
    await delete_previous_message(message)
    if message.text == "–î—Ä—É–≥–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ä—É—á–Ω—É—é:")
        return
    
    try:
        quantity = int(message.text)
        if quantity <= 0:
            raise ValueError
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ")
        return
    
    await state.update_data(quantity=quantity)
    await proceed_to_save(message, state)

async def proceed_to_save(message: types.Message, state: FSMContext):
    data = await state.get_data()
    current_date = datetime.now().strftime("%d.%m.%Y")
    weekday = get_current_weekday()
    user_id = message.from_user.id
    username = next((u[1] for u in allowed_users if u[0] == user_id), "Unknown")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    if user_id not in reports_db:
        reports_db[user_id] = {}
    
    if current_date not in reports_db[user_id]:
        reports_db[user_id][current_date] = []
    
    reports_db[user_id][current_date].append({
        "task": data["task"],
        "work_type": data["work_type"],
        "progress": data["progress"],
        "quantity": data.get("quantity", 0),
        "weekday": weekday
    })
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
    report_msg = (
        "‚úÖ <b>–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω</b>\n\n"
        f"üìÖ –î–µ–Ω—å: {weekday}, {current_date}\n"
        f"üìå –ó–∞–¥–∞—á–∞: {data['task']}\n"
        f"üîß –í–∏–¥ —Ä–∞–±–æ—Ç—ã: {data['work_type']}\n"
        f"üìä –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {data['progress']}%\n"
        f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {data.get('quantity', 'N/A')} —à—Ç."
    )
    
    await message.answer(
        report_msg,
        parse_mode="HTML",
        reply_markup=types.ReplyKeyboardRemove()
    )
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    admin_msg = (
        f"üìå –ù–æ–≤—ã–π –æ—Ç—á–µ—Ç –æ—Ç {username}\n\n"
        f"üìÖ {weekday}, {current_date}\n"
        f"üîß {data['work_type']}: {data['progress']}% ({data.get('quantity', 'N/A')} —à—Ç.)\n"
        f"üìù –ó–∞–¥–∞—á–∞: {data['task']}"
    )
    
    for admin_id in admin_users:
        try:
            await bot.send_message(admin_id, admin_msg, parse_mode="HTML")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")
    
    await state.clear()

@dp.message(Command("my_reports"))
async def cmd_my_reports(message: types.Message):
    user_id = message.from_user.id
    username = next((u[1] for u in allowed_users if u[0] == user_id), "Unknown")
    report = generate_user_report(user_id, username)
    await message.answer(report, parse_mode="HTML")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
