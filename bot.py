import os
import logging
from datetime import datetime, timedelta, time
from typing import Dict, List, Tuple

import psycopg2
from psycopg2 import sql
from psycopg2.extras import DictCursor
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Updater,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    Filters,
    CallbackContext,
    ConversationHandler,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', 
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π ConversationHandler
SETTING_TASK, SETTING_WORK_TYPE, SETTING_AMOUNT = range(3)
REPORTING_WORK_TYPE, REPORTING_AMOUNT, REPORTING_ADDITIONAL = range(3)
ADMIN_ADD_USER, ADMIN_REMOVE_USER = range(2)

# –í–∏–¥—ã —Ä–∞–±–æ—Ç
WORK_TYPES = [
    "–†–∞—Å–ø–∏–ª –¥–æ—Å–∫–∏", "–§—É–≥–æ–≤–∞–Ω–∏–µ", "–†–µ–π—Å–º—É—Å–æ–≤–∞–Ω–∏–µ", "–†–∞—Å–ø–∏–ª –Ω–∞ –¥–µ—Ç–∞–ª–∏",
    "–û—Ç–≤–µ—Ä—Å—Ç–∏—è –≤ –ø–ª–∞—Å—Ç—å", "–ü—Ä–∏—Å–∞–¥–∫–∞ –æ—Ç–≤–µ—Ä—Å—Ç–∏–π", "–§—Ä–µ–∑–µ—Ä–æ–≤–∫–∞ –ø–∞–∑–æ–≤",
    "–§—Ä–µ–∑–µ—Ä–æ–≤–∫–∞ —É–≥–ª–æ–≤", "–®–ª–∏—Ñ–æ–≤–∫–∞", "–ü–æ–¥—Ä–µ–∑", "–°–±–æ—Ä–∫–∞", "–î–æ—à–ª–∏—Ñ–æ–≤–∫–∞",
    "–ü–æ–∫—Ä–∞—Å–∫–∞ –∫–∞—Ä–∫–∞—Å–æ–≤", "–ü–æ–∫—Ä–∞—Å–∫–∞ –Ω–æ–∂–µ–∫", "–ü–æ–∫—Ä–∞—Å–∫–∞ —Ä—É—á–µ–∫",
    "–†–µ–∑ –Ω–∞ –∫–æ—Ä–æ–±–∫–∏", "–°–±–æ—Ä–∫–∞ –∫–æ—Ä–æ–±–æ–∫", "–£–ø–∞–∫–æ–≤–∫–∞",
    "–§—Ä–µ–∑–µ—Ä–æ–≤–∫–∞ –ø–∞–∑–æ–≤ —Ä—É—á–µ–∫", "–†–∞—Å–ø–∏–ª –Ω–∞ —Ä—É—á–∫–∏"
]

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
def get_db_connection():
    db_url = os.getenv('DATABASE_URL')
    if db_url:
        return psycopg2.connect(db_url, sslmode='require')
    return psycopg2.connect(
        host=os.getenv('DB_HOST'),
        port=os.getenv('DB_PORT'),
        user=os.getenv('DB_USER'),
        password=os.getenv('DB_PASSWORD'),
        dbname=os.getenv('DB_NAME'),
        sslmode='require'
    )

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    with get_db_connection() as conn:
        with conn.cursor() as cursor:
            # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS users (
                    user_id BIGINT PRIMARY KEY,
                    username TEXT,
                    full_name TEXT,
                    is_admin BOOLEAN DEFAULT FALSE,
                    registered_at TIMESTAMP DEFAULT NOW()
                )
            """)
            
            # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–¥–∞—á
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS tasks (
                    task_id SERIAL PRIMARY KEY,
                    description TEXT NOT NULL,
                    total_amount INTEGER NOT NULL,
                    created_at TIMESTAMP DEFAULT NOW(),
                    created_by BIGINT REFERENCES users(user_id),
                    is_active BOOLEAN DEFAULT TRUE
                )
            """)
            
            # –¢–∞–±–ª–∏—Ü–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS task_assignments (
                    assignment_id SERIAL PRIMARY KEY,
                    task_id INTEGER REFERENCES tasks(task_id),
                    work_type TEXT NOT NULL,
                    day_of_week INTEGER NOT NULL,
                    amount INTEGER NOT NULL,
                    assigned_at TIMESTAMP DEFAULT NOW()
                )
            """)
            
            # –¢–∞–±–ª–∏—Ü–∞ –æ—Ç—á–µ—Ç–æ–≤
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS reports (
                    report_id SERIAL PRIMARY KEY,
                    user_id BIGINT REFERENCES users(user_id),
                    task_id INTEGER REFERENCES tasks(task_id),
                    work_type TEXT NOT NULL,
                    amount INTEGER NOT NULL,
                    report_date DATE NOT NULL,
                    reported_at TIMESTAMP DEFAULT NOW()
                )
            """)
            
            # –¢–∞–±–ª–∏—Ü–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS allowed_users (
                    user_id BIGINT PRIMARY KEY
                )
            """)
            
            conn.commit()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def is_admin(user_id: int) -> bool:
    try:
        with get_db_connection() as conn:
            with conn.cursor() as cursor:
                cursor.execute(
                    "SELECT is_admin FROM users WHERE user_id = %s", 
                    (user_id,)
                )
                result = cursor.fetchone()
                return result and result[0]
    except Exception as e:
        logger.error(f"Error checking admin status: {e}")
        return False

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def register_user(user_id: int, username: str, first_name: str, last_name: str):
    full_name = f"{first_name} {last_name}".strip()
    try:
        with get_db_connection() as conn:
            with conn.cursor() as cursor:
                cursor.execute("""
                    INSERT INTO users (user_id, username, full_name)
                    VALUES (%s, %s, %s)
                    ON CONFLICT (user_id) DO UPDATE SET
                        username = EXCLUDED.username,
                        full_name = EXCLUDED.full_name
                """, (user_id, username, full_name))
                conn.commit()
    except Exception as e:
        logger.error(f"Error registering user: {e}")

# –ö–æ–º–∞–Ω–¥–∞ /start
def start(update: Update, context: CallbackContext) -> None:
    user = update.effective_user
    register_user(user.id, user.username, user.first_name, user.last_name)
    
    if not is_user_allowed(user.id):
        update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    
    show_main_menu(update, context)

def show_main_menu(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    keyboard = [
        [InlineKeyboardButton("üìä –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç", callback_data='send_report')],
        [InlineKeyboardButton("üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞—á–∏", callback_data='view_tasks')]
    ]
    
    if is_admin(user_id):
        keyboard.append([InlineKeyboardButton("üë®‚Äçüíª –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data='admin_panel')])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        update.callback_query.edit_message_text(
            text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )
    else:
        update.message.reply_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )

# –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
def admin_panel(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    query.answer()
    
    if not is_admin(query.from_user.id):
        query.edit_message_text(text="‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    keyboard = [
        [InlineKeyboardButton("üìù –ü–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data='set_task')],
        [InlineKeyboardButton("üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç—á–µ—Ç—ã", callback_data='view_reports')],
        [InlineKeyboardButton("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data='manage_users')],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='main_menu')]
    ]
    
    query.edit_message_text(
        text="–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
def manage_users(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    query.answer()
    
    if not is_admin(query.from_user.id):
        query.edit_message_text(text="‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data='add_user')],
        [InlineKeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data='remove_user')],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='admin_panel')]
    ]
    
    query.edit_message_text(
        text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def add_user(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    query.answer()
    
    query.edit_message_text(
        text="–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å:",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='manage_users')]])
    )
    return ADMIN_ADD_USER

def add_user_handler(update: Update, context: CallbackContext) -> int:
    try:
        user_id = int(update.message.text.strip())
        with get_db_connection() as conn:
            with conn.cursor() as cursor:
                cursor.execute(
                    "INSERT INTO allowed_users (user_id) VALUES (%s) ON CONFLICT DO NOTHING", 
                    (user_id,)
                )
                conn.commit()
        
        update.message.reply_text(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='manage_users')]])
        )
        return ConversationHandler.END
    except ValueError:
        update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='manage_users')]])
        )
        return ADMIN_ADD_USER

# –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def remove_user(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    query.answer()
    
    query.edit_message_text(
        text="–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='manage_users')]])
    )
    return ADMIN_REMOVE_USER

def remove_user_handler(update: Update, context: CallbackContext) -> int:
    try:
        user_id = int(update.message.text.strip())
        with get_db_connection() as conn:
            with conn.cursor() as cursor:
                cursor.execute(
                    "DELETE FROM allowed_users WHERE user_id = %s", 
                    (user_id,)
                )
                conn.commit()
        
        update.message.reply_text(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='manage_users')]])
        )
        return ConversationHandler.END
    except ValueError:
        update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='manage_users')]])
        )
        return ADMIN_REMOVE_USER

# –ü–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–¥–∞—á–∏
def set_task(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    query.answer()
    
    query.edit_message_text(
        text="–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: '–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ - 100'",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='admin_panel')]])
    )
    return SETTING_TASK

def set_task_description(update: Update, context: CallbackContext) -> int:
    text = update.message.text
    try:
        description, amount = text.rsplit('-', 1)
        description = description.strip()
        amount = int(amount.strip())
        
        context.user_data['task_description'] = description
        context.user_data['total_amount'] = amount
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        with get_db_connection() as conn:
            with conn.cursor() as cursor:
                cursor.execute(
                    "INSERT INTO tasks (description, total_amount, created_by) VALUES (%s, %s, %s) RETURNING task_id",
                    (description, amount, update.message.from_user.id)
                )
                task_id = cursor.fetchone()[0]
                conn.commit()
        
        context.user_data['task_id'] = task_id
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
        days = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
        keyboard = [
            [InlineKeyboardButton(day, callback_data=f'day_{i}')] for i, day in enumerate(days)
        ]
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='admin_panel')])
        
        update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return SETTING_WORK_TYPE
    except Exception as e:
        logger.error(f"Error setting task: {e}")
        update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: '–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ - 100'",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='admin_panel')]])
        )
        return SETTING_TASK

def set_work_type(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    query.answer()
    
    day_of_week = int(query.data.split('_')[1])
    context.user_data['day_of_week'] = day_of_week
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–∏–¥–∞ —Ä–∞–±–æ—Ç—ã
    keyboard = []
    for i in range(0, len(WORK_TYPES), 2):
        row = []
        if i < len(WORK_TYPES):
            row.append(InlineKeyboardButton(WORK_TYPES[i], callback_data=f'work_{i}'))
        if i+1 < len(WORK_TYPES):
            row.append(InlineKeyboardButton(WORK_TYPES[i+1], callback_data=f'work_{i+1}'))
        keyboard.append(row)
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='admin_panel')])
    
    query.edit_message_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ —Ä–∞–±–æ—Ç—ã:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return SETTING_AMOUNT

def set_work_amount(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    query.answer()
    
    work_type_idx = int(query.data.split('_')[1])
    work_type = WORK_TYPES[work_type_idx]
    context.user_data['work_type'] = work_type
    
    query.edit_message_text(
        text=f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã '{work_type}':",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f'day_{context.user_data["day_of_week"]}')]])
    )
    return SETTING_AMOUNT

def save_work_assignment(update: Update, context: CallbackContext) -> int:
    try:
        amount = int(update.message.text)
        task_id = context.user_data['task_id']
        day_of_week = context.user_data['day_of_week']
        work_type = context.user_data['work_type']
        
        with get_db_connection() as conn:
            with conn.cursor() as cursor:
                cursor.execute(
                    "INSERT INTO task_assignments (task_id, work_type, day_of_week, amount) VALUES (%s, %s, %s, %s)",
                    (task_id, work_type, day_of_week, amount)
                )
                conn.commit()
        
        days = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
        update.message.reply_text(
            f"‚úÖ –†–∞–±–æ—Ç–∞ '{work_type}' –Ω–∞ {days[day_of_week]} –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ {amount} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data='admin_panel')]])
        )
        return ConversationHandler.END
    except ValueError:
        update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f'day_{context.user_data["day_of_week"]}')]])
        )
        return SETTING_AMOUNT

# –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞—á
def view_tasks(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    query.answer()
    
    try:
        with get_db_connection() as conn:
            with conn.cursor() as cursor:
                cursor.execute("""
                    SELECT t.task_id, t.description, t.total_amount, 
                           COALESCE(SUM(r.amount), 0) AS completed
                    FROM tasks t
                    LEFT JOIN reports r ON t.task_id = r.task_id
                    WHERE t.is_active = TRUE
                    GROUP BY t.task_id
                    ORDER BY t.created_at DESC
                """)
                tasks = cursor.fetchall()
        
        if not tasks:
            query.edit_message_text(
                text="‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='main_menu')]])
            )
            return
        
        message = "üìã –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á:\n\n"
        for task in tasks:
            progress = (task[3] / task[2]) * 100 if task[2] > 0 else 0
            message += (
                f"üîπ {task[1]}\n"
                f"üìå –í—Å–µ–≥–æ: {task[2]}\n"
                f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {task[3]}\n"
                f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress:.1f}%\n\n"
            )
        
        query.edit_message_text(
            text=message,
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='main_menu')]])
        )
    except Exception as e:
        logger.error(f"Error viewing tasks: {e}")
        query.edit_message_text(
            text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='main_menu')]])
        )

# –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç—á–µ—Ç–æ–≤
def view_reports(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    query.answer()
    
    if not is_admin(query.from_user.id):
        query.edit_message_text(text="‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    try:
        with get_db_connection() as conn:
            with conn.cursor() as cursor:
                cursor.execute("""
                    SELECT r.report_id, u.full_name, t.description, 
                           r.work_type, r.amount, r.report_date
                    FROM reports r
                    JOIN users u ON r.user_id = u.user_id
                    JOIN tasks t ON r.task_id = t.task_id
                    ORDER BY r.report_date DESC, r.reported_at DESC
                    LIMIT 20
                """)
                reports = cursor.fetchall()
        
        if not reports:
            query.edit_message_text(
                text="‚ÑπÔ∏è –ù–µ—Ç –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='admin_panel')]])
            )
            return
        
        message = "üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç—á–µ—Ç—ã:\n\n"
        for report in reports:
            message += (
                f"üë§ {report[1]}\n"
                f"üìÖ {report[5].strftime('%d.%m.%Y')}\n"
                f"üìå –ó–∞–¥–∞—á–∞: {report[2]}\n"
                f"üîß –†–∞–±–æ—Ç–∞: {report[3]}\n"
                f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {report[4]}\n\n"
            )
        
        query.edit_message_text(
            text=message,
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='admin_panel')]])
        )
    except Exception as e:
        logger.error(f"Error viewing reports: {e}")
        query.edit_message_text(
            text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–æ–≤.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='admin_panel')]])
        )

# –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞
def send_report(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    query.answer()
    
    try:
        with get_db_connection() as conn:
            with conn.cursor() as cursor:
                cursor.execute("""
                    SELECT task_id, description 
                    FROM tasks 
                    WHERE is_active = TRUE 
                    ORDER BY created_at DESC
                """)
                tasks = cursor.fetchall()
        
        if not tasks:
            query.edit_message_text(
                text="‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –æ—Ç—á–µ—Ç–∞.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='main_menu')]])
            )
            return ConversationHandler.END
        
        keyboard = []
        for task in tasks:
            keyboard.append([InlineKeyboardButton(task[1], callback_data=f'task_{task[0]}')])
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='main_menu')])
        
        query.edit_message_text(
            text="–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –æ—Ç—á–µ—Ç–∞:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return REPORTING_WORK_TYPE
    except Exception as e:
        logger.error(f"Error starting report: {e}")
        query.edit_message_text(
            text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='main_menu')]])
        )
        return ConversationHandler.END

def report_work_type(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    query.answer()
    
    task_id = int(query.data.split('_')[1])
    context.user_data['report_task_id'] = task_id
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–∏–¥–∞ —Ä–∞–±–æ—Ç—ã
    keyboard = []
    for i in range(0, len(WORK_TYPES), 2):
        row = []
        if i < len(WORK_TYPES):
            row.append(InlineKeyboardButton(WORK_TYPES[i], callback_data=f'report_work_{i}'))
        if i+1 < len(WORK_TYPES):
            row.append(InlineKeyboardButton(WORK_TYPES[i+1], callback_data=f'report_work_{i+1}'))
        keyboard.append(row)
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='send_report')])
    
    query.edit_message_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ —Ä–∞–±–æ—Ç—ã:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return REPORTING_AMOUNT

def report_amount(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    query.answer()
    
    work_type_idx = int(query.data.split('_')[2])
    work_type = WORK_TYPES[work_type_idx]
    context.user_data['report_work_type'] = work_type
    
    query.edit_message_text(
        text=f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã '{work_type}':",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f'task_{context.user_data["report_task_id"]}')]])
    )
    return REPORTING_ADDITIONAL

def save_report(update: Update, context: CallbackContext) -> int:
    try:
        amount = int(update.message.text)
        task_id = context.user_data['report_task_id']
        work_type = context.user_data['report_work_type']
        user_id = update.message.from_user.id
        report_date = datetime.now().date()
        
        with get_db_connection() as conn:
            with conn.cursor() as cursor:
                cursor.execute(
                    "INSERT INTO reports (user_id, task_id, work_type, amount, report_date) VALUES (%s, %s, %s, %s, %s)",
                    (user_id, task_id, work_type, amount, report_date)
                )
                conn.commit()
        
        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ä–∞–±–æ—Ç—É", callback_data=f'task_{task_id}')],
            [InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]
        ]
        
        update.message.reply_text(
            f"‚úÖ –û—Ç—á–µ—Ç –ø–æ —Ä–∞–±–æ—Ç–µ '{work_type}' –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ {amount} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return ConversationHandler.END
    except ValueError:
        update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f'task_{context.user_data["report_task_id"]}')]])
        )
        return REPORTING_AMOUNT

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def is_user_allowed(user_id: int) -> bool:
    try:
        with get_db_connection() as conn:
            with conn.cursor() as cursor:
                cursor.execute(
                    "SELECT 1 FROM allowed_users WHERE user_id = %s", 
                    (user_id,)
                )
                return cursor.fetchone() is not None
    except Exception as e:
        logger.error(f"Error checking allowed user: {e}")
        return False

# –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
def delete_old_messages(context: CallbackContext):
    try:
        with get_db_connection() as conn:
            with conn.cursor() as cursor:
                cursor.execute(
                    "DELETE FROM reports WHERE reported_at < NOW() - INTERVAL '7 days'"
                )
                conn.commit()
        logger.info("Old messages deleted successfully")
    except Exception as e:
        logger.error(f"Error deleting old messages: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
def error_handler(update: Update, context: CallbackContext):
    logger.error(msg="Exception while handling an update:", exc_info=context.error)
    
    if update.callback_query:
        update.callback_query.edit_message_text(
            text="‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='main_menu')]])
        )
    else:
        update.message.reply_text(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='main_menu')]])
        )

def main() -> None:
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_db()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ Updater
    token = os.getenv('TELEGRAM_TOKEN')
    updater = Updater(token, use_context=True)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä
    dispatcher = updater.dispatcher
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    dispatcher.add_handler(CommandHandler("start", start))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
    dispatcher.add_handler(CallbackQueryHandler(show_main_menu, pattern='^main_menu$'))
    dispatcher.add_handler(CallbackQueryHandler(admin_panel, pattern='^admin_panel$'))
    dispatcher.add_handler(CallbackQueryHandler(manage_users, pattern='^manage_users$'))
    dispatcher.add_handler(CallbackQueryHandler(view_tasks, pattern='^view_tasks$'))
    dispatcher.add_handler(CallbackQueryHandler(view_reports, pattern='^view_reports$'))
    dispatcher.add_handler(CallbackQueryHandler(send_report, pattern='^send_report$'))
    dispatcher.add_handler(CallbackQueryHandler(set_task, pattern='^set_task$'))
    dispatcher.add_handler(CallbackQueryHandler(add_user, pattern='^add_user$'))
    dispatcher.add_handler(CallbackQueryHandler(remove_user, pattern='^remove_user$'))
    
    # ConversationHandler –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
    admin_conv_handler = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(set_task, pattern='^set_task$'),
            CallbackQueryHandler(add_user, pattern='^add_user$'),
            CallbackQueryHandler(remove_user, pattern='^remove_user$')
        ],
        states={
            SETTING_TASK: [MessageHandler(Filters.text & ~Filters.command, set_task_description)],
            SETTING_WORK_TYPE: [CallbackQueryHandler(set_work_type, pattern='^day_[0-6]$')],
            SETTING_AMOUNT: [
                CallbackQueryHandler(set_work_amount, pattern='^work_[0-9]+$'),
                MessageHandler(Filters.text & ~Filters.command, save_work_assignment)
            ],
            ADMIN_ADD_USER: [MessageHandler(Filters.text & ~Filters.command, add_user_handler)],
            ADMIN_REMOVE_USER: [MessageHandler(Filters.text & ~Filters.command, remove_user_handler)]
        },
        fallbacks=[
            CommandHandler('cancel', cancel),
            CallbackQueryHandler(admin_panel, pattern='^admin_panel$'),
            CallbackQueryHandler(manage_users, pattern='^manage_users$')
        ],
        per_message=True
    )
    dispatcher.add_handler(admin_conv_handler)
    
    # ConversationHandler –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–æ–≤
    report_conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(send_report, pattern='^send_report$')],
        states={
            REPORTING_WORK_TYPE: [CallbackQueryHandler(report_work_type, pattern='^task_[0-9]+$')],
            REPORTING_AMOUNT: [CallbackQueryHandler(report_amount, pattern='^report_work_[0-9]+$')],
            REPORTING_ADDITIONAL: [MessageHandler(Filters.text & ~Filters.command, save_report)]
        },
        fallbacks=[
            CommandHandler('cancel', cancel),
            CallbackQueryHandler(show_main_menu, pattern='^main_menu$')
        ],
        per_message=True
    )
    dispatcher.add_handler(report_conv_handler)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    dispatcher.add_error_handler(error_handler)
    
    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    job_queue = updater.job_queue
    job_queue.run_daily(delete_old_messages, time=time(hour=3, minute=0))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    updater.start_polling(drop_pending_updates=True)
    updater.idle()

if __name__ == '__main__':
    main()
