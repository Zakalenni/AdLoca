import os
import logging
from datetime import datetime, timedelta, time  # –î–æ–±–∞–≤–ª–µ–Ω time
from typing import Dict, List

import psycopg2
from psycopg2 import sql
from psycopg2.extras import DictCursor
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Updater,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    Filters,
    CallbackContext,
    ConversationHandler,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π ConversationHandler
SETTING_TASK, SETTING_WORK_TYPE, SETTING_AMOUNT = range(3)
REPORTING_WORK_TYPE, REPORTING_AMOUNT, REPORTING_ADDITIONAL = range(3)
ADMIN_ADD_USER, ADMIN_REMOVE_USER = range(2)

# –í–∏–¥—ã —Ä–∞–±–æ—Ç
WORK_TYPES = [
    "–†–∞—Å–ø–∏–ª –¥–æ—Å–∫–∏",
    "–§—É–≥–æ–≤–∞–Ω–∏–µ",
    "–†–µ–π—Å–º—É—Å–æ–≤–∞–Ω–∏–µ",
    "–†–∞—Å–ø–∏–ª –Ω–∞ –¥–µ—Ç–∞–ª–∏",
    "–û—Ç–≤–µ—Ä—Å—Ç–∏—è –≤ –ø–ª–∞—Å—Ç—å",
    "–ü—Ä–∏—Å–∞–¥–∫–∞ –æ—Ç–≤–µ—Ä—Å—Ç–∏–π",
    "–§—Ä–µ–∑–µ—Ä–æ–≤–∫–∞ –ø–∞–∑–æ–≤",
    "–§—Ä–µ–∑–µ—Ä–æ–≤–∫–∞ —É–≥–ª–æ–≤",
    "–®–ª–∏—Ñ–æ–≤–∫–∞",
    "–ü–æ–¥—Ä–µ–∑",
    "–°–±–æ—Ä–∫–∞",
    "–î–æ—à–ª–∏—Ñ–æ–≤–∫–∞",
    "–ü–æ–∫—Ä–∞—Å–∫–∞ –∫–∞—Ä–∫–∞—Å–æ–≤",
    "–ü–æ–∫—Ä–∞—Å–∫–∞ –Ω–æ–∂–µ–∫",
    "–ü–æ–∫—Ä–∞—Å–∫–∞ —Ä—É—á–µ–∫",
    "–†–µ–∑ –Ω–∞ –∫–æ—Ä–æ–±–∫–∏",
    "–°–±–æ—Ä–∫–∞ –∫–æ—Ä–æ–±–æ–∫",
    "–£–ø–∞–∫–æ–≤–∫–∞",
    "–§—Ä–µ–∑–µ—Ä–æ–≤–∫–∞ –ø–∞–∑–æ–≤ —Ä—É—á–µ–∫",
    "–†–∞—Å–ø–∏–ª –Ω–∞ —Ä—É—á–∫–∏"
]

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
def get_db_connection():
    return psycopg2.connect(
        dbname=os.getenv('DB_NAME'),
        user=os.getenv('DB_USER'),
        password=os.getenv('DB_PASSWORD'),
        host=os.getenv('DB_HOST'),
        port=os.getenv('DB_PORT'),
        sslmode='require'
    )

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    with get_db_connection() as conn:
        with conn.cursor() as cursor:
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ç–∞–±–ª–∏—Ü—É (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
            cursor.execute("DROP TABLE IF EXISTS users CASCADE")
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Å—Ç–æ–ª–±—Ü–∞–º–∏ (–±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ SQL)
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS users (
                    user_id BIGINT PRIMARY KEY,
                    username TEXT,
                    full_name TEXT,
                    is_admin BOOLEAN DEFAULT FALSE,
                    registered_at TIMESTAMP DEFAULT NOW()
                )
            """)
            
            # –°–æ–∑–¥–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã (—Ç–∞–∫–∂–µ –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ SQL)
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS tasks (
                    task_id SERIAL PRIMARY KEY,
                    description TEXT NOT NULL,
                    total_amount INTEGER NOT NULL,
                    created_at TIMESTAMP DEFAULT NOW(),
                    created_by BIGINT REFERENCES users(user_id),
                    is_active BOOLEAN DEFAULT TRUE
                )
            """)
            
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS task_assignments (
                    assignment_id SERIAL PRIMARY KEY,
                    task_id INTEGER REFERENCES tasks(task_id),
                    work_type TEXT NOT NULL,
                    day_of_week INTEGER NOT NULL,
                    amount INTEGER NOT NULL,
                    assigned_at TIMESTAMP DEFAULT NOW()
                )
            """)
            
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS reports (
                    report_id SERIAL PRIMARY KEY,
                    user_id BIGINT REFERENCES users(user_id),
                    task_id INTEGER REFERENCES tasks(task_id),
                    work_type TEXT NOT NULL,
                    amount INTEGER NOT NULL,
                    report_date DATE NOT NULL,
                    reported_at TIMESTAMP DEFAULT NOW()
                )
            """)
            
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS allowed_users (
                    user_id BIGINT PRIMARY KEY
                )
            """)
            
            conn.commit()
# –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
def is_admin(user_id: int) -> bool:
    with get_db_connection() as conn:
        with conn.cursor(cursor_factory=DictCursor) as cursor:
            cursor.execute("SELECT is_admin FROM users WHERE user_id = %s", (user_id,))
            user = cursor.fetchone()
            return user and user['is_admin']

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —Ä–∞–∑—Ä–µ—à–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
def is_user_allowed(user_id: int) -> bool:
    with get_db_connection() as conn:
        with conn.cursor() as cursor:
            cursor.execute("SELECT 1 FROM allowed_users WHERE user_id = %s", (user_id,))
            return cursor.fetchone() is not None

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def register_user(user_id: int, username: str, first_name: str, last_name: str):
    try:
        full_name = f"{first_name} {last_name}".strip()
        with get_db_connection() as conn:
            with conn.cursor() as cursor:
                cursor.execute("""
                    INSERT INTO users (user_id, username, full_name)
                    VALUES (%s, %s, %s)
                    ON CONFLICT (user_id) DO UPDATE SET
                        username = EXCLUDED.username,
                        full_name = EXCLUDED.full_name
                """, (user_id, username, full_name))
                conn.commit()
    except psycopg2.Error as e:
        logger.error(f"Database error in register_user: {e}")
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–î
        init_db()
        register_user(user_id, username, first_name, last_name)  # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞

# –ö–æ–º–∞–Ω–¥–∞ /start
def start(update: Update, context: CallbackContext) -> None:
    user = update.effective_user
    register_user(user.id, user.username, user.first_name, user.last_name)
    
    if not is_user_allowed(user.id):
        update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    
    keyboard = [
        [InlineKeyboardButton("üìä –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç", callback_data='send_report')],
        [InlineKeyboardButton("üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞—á–∏", callback_data='view_tasks')]
    ]
    
    if is_admin(user.id):
        keyboard.append([InlineKeyboardButton("üë®‚Äçüíª –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data='admin_panel')])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –±–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞–±–æ—Ç.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    query.answer()
    
    keyboard = [
        [InlineKeyboardButton("üìä –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç", callback_data='send_report')],
        [InlineKeyboardButton("üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞—á–∏", callback_data='view_tasks')]
    ]
    
    if is_admin(query.from_user.id):
        keyboard.append([InlineKeyboardButton("üë®‚Äçüíª –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data='admin_panel')])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.edit_message_text(
        text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

# –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
def admin_panel(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    query.answer()
    
    if not is_admin(query.from_user.id):
        query.edit_message_text(text="‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    keyboard = [
        [InlineKeyboardButton("üìù –ü–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data='set_task')],
        [InlineKeyboardButton("üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç—á–µ—Ç—ã", callback_data='view_reports')],
        [InlineKeyboardButton("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data='manage_users')],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='main_menu')]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.edit_message_text(
        text="–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
def manage_users(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    query.answer()
    
    if not is_admin(query.from_user.id):
        query.edit_message_text(text="‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data='add_user')],
        [InlineKeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data='remove_user')],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='admin_panel')]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.edit_message_text(
        text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:",
        reply_markup=reply_markup
    )

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –∑–∞–ø—Ä–æ—Å ID
def add_user(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    query.answer()
    
    query.edit_message_text(
        text="–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å:",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='manage_users')]])
    )
    return ADMIN_ADD_USER

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def add_user_handler(update: Update, context: CallbackContext) -> int:
    user_id = update.message.text.strip()
    
    try:
        user_id_int = int(user_id)
    except ValueError:
        update.message.reply_text(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='manage_users')]])
        )
        return ADMIN_ADD_USER
    
    with get_db_connection() as conn:
        with conn.cursor() as cursor:
            cursor.execute("INSERT INTO allowed_users (user_id) VALUES (%s) ON CONFLICT DO NOTHING", (user_id_int,))
            conn.commit()
    
    update.message.reply_text(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id_int} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö.",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='manage_users')]])
    )
    return ConversationHandler.END

# –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –∑–∞–ø—Ä–æ—Å ID
def remove_user(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    query.answer()
    
    query.edit_message_text(
        text="–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='manage_users')]])
    )
    return ADMIN_REMOVE_USER

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def remove_user_handler(update: Update, context: CallbackContext) -> int:
    user_id = update.message.text.strip()
    
    try:
        user_id_int = int(user_id)
    except ValueError:
        update.message.reply_text(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='manage_users')]])
        )
        return ADMIN_REMOVE_USER
    
    with get_db_connection() as conn:
        with conn.cursor() as cursor:
            cursor.execute("DELETE FROM allowed_users WHERE user_id = %s", (user_id_int,))
            conn.commit()
    
    update.message.reply_text(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id_int} —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö.",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='manage_users')]])
    )
    return ConversationHandler.END

# –ü–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–¥–∞—á–∏ - –Ω–∞—á–∞–ª–æ
def set_task(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    query.answer()
    
    query.edit_message_text(
        text="–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–ª–æ–≤ - 100'):",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='admin_panel')]])
    )
    return SETTING_TASK

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
def set_task_description(update: Update, context: CallbackContext) -> int:
    try:
        text = update.message.text
        parts = text.rsplit('-', 1)
        
        if len(parts) != 2:
            update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ: '–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ - –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ'",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data='admin_panel')]])
            )
            return SETTING_TASK
            
        description = parts[0].strip()
        try:
            total_amount = int(parts[1].strip())
        except ValueError:
            update.message.reply_text(
                "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data='admin_panel')]])
            )
            return SETTING_TASK
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ context.user_data
        context.user_data['task_description'] = description
        context.user_data['total_amount'] = total_amount
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –≤ –ë–î
        with get_db_connection() as conn:
            with conn.cursor() as cursor:
                cursor.execute(
                    "INSERT INTO tasks (description, total_amount, created_by) VALUES (%s, %s, %s) RETURNING task_id",
                    (description, total_amount, update.message.from_user.id)
                )
                task_id = cursor.fetchone()[0]
                conn.commit()
        
        context.user_data['task_id'] = task_id
        logger.info(f"New task created: {task_id} - {description}")
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
        days = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
        buttons = [[InlineKeyboardButton(day, callback_data=f'day_{i}')] for i, day in enumerate(days)]
        buttons.append([InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data='admin_panel')])
        
        update.message.reply_text(
            "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç:",
            reply_markup=InlineKeyboardMarkup(buttons)
        )
        return SETTING_WORK_TYPE
        
    except Exception as e:
        logger.error(f"Error in set_task_description: {e}")
        update.message.reply_text(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data='admin_panel')]])
        )
        return ConversationHandler.END

# –í—ã–±–æ—Ä –≤–∏–¥–∞ —Ä–∞–±–æ—Ç—ã –¥–ª—è –∑–∞–¥–∞—á–∏
def set_work_type(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    query.answer()
    
    day_of_week = int(query.data.split('_')[1])
    context.user_data['day_of_week'] = day_of_week
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–∏–¥–∞ —Ä–∞–±–æ—Ç—ã
    keyboard = []
    for i in range(0, len(WORK_TYPES), 2):
        row = []
        if i < len(WORK_TYPES):
            row.append(InlineKeyboardButton(WORK_TYPES[i], callback_data=f'work_{i}'))
        if i+1 < len(WORK_TYPES):
            row.append(InlineKeyboardButton(WORK_TYPES[i+1], callback_data=f'work_{i+1}'))
        keyboard.append(row)
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='admin_panel')])
    
    query.edit_message_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ —Ä–∞–±–æ—Ç—ã:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return SETTING_AMOUNT

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã
def set_work_amount(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    query.answer()
    
    work_type_idx = int(query.data.split('_')[1])
    work_type = WORK_TYPES[work_type_idx]
    context.user_data['work_type'] = work_type
    
    query.edit_message_text(
        text=f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã '{work_type}':",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f'day_{context.user_data["day_of_week"]}')]])
    )
    return ConversationHandler.END

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
def save_work_assignment(update: Update, context: CallbackContext) -> int:
    try:
        amount = int(update.message.text)
    except ValueError:
        update.message.reply_text(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f'day_{context.user_data["day_of_week"]}')]])
        )
        return SETTING_AMOUNT
    
    task_id = context.user_data['task_id']
    day_of_week = context.user_data['day_of_week']
    work_type = context.user_data['work_type']
    
    with get_db_connection() as conn:
        with conn.cursor() as cursor:
            cursor.execute(
                "INSERT INTO task_assignments (task_id, work_type, day_of_week, amount) VALUES (%s, %s, %s, %s)",
                (task_id, work_type, day_of_week, amount)
            )
            conn.commit()
    
    update.message.reply_text(
        f"–†–∞–±–æ—Ç–∞ '{work_type}' –Ω–∞ {['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'][day_of_week]} "
        f"–≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ {amount} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫ –∑–∞–¥–∞—á–µ.",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data='admin_panel')]])
    )
    return ConversationHandler.END

# –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞—á
def view_tasks(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    query.answer()
    
    with get_db_connection() as conn:
        with conn.cursor(cursor_factory=DictCursor) as cursor:
            cursor.execute("""
                SELECT t.task_id, t.description, t.total_amount, 
                       COALESCE(SUM(r.amount), 0) AS completed,
                       (COALESCE(SUM(r.amount), 0) * 100 / t.total_amount) AS progress
                FROM tasks t
                LEFT JOIN reports r ON t.task_id = r.task_id
                WHERE t.is_active = TRUE
                GROUP BY t.task_id
                ORDER BY t.created_at DESC
            """)
            tasks = cursor.fetchall()
    
    if not tasks:
        query.edit_message_text(
            text="–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='main_menu')]])
        )
        return
    
    message = "üìã –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á:\n\n"
    for task in tasks:
        message += (
            f"üîπ {task['description']}\n"
            f"üìå –í—Å–µ–≥–æ: {task['total_amount']}\n"
            f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {task['completed']}\n"
            f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {task['progress']}%\n\n"
        )
    
    query.edit_message_text(
        text=message,
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='main_menu')]])
    )

# –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç—á–µ—Ç–æ–≤ (–¥–ª—è –∞–¥–º–∏–Ω–∞)
def view_reports(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    query.answer()
    
    if not is_admin(query.from_user.id):
        query.edit_message_text(text="‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç—á–µ—Ç—ã
    with get_db_connection() as conn:
        with conn.cursor(cursor_factory=DictCursor) as cursor:
            cursor.execute("""
                SELECT r.report_id, u.first_name, u.last_name, t.description, 
                       r.work_type, r.amount, r.report_date
                FROM reports r
                JOIN users u ON r.user_id = u.user_id
                JOIN tasks t ON r.task_id = t.task_id
                ORDER BY r.report_date DESC, r.reported_at DESC
                LIMIT 20
            """)
            reports = cursor.fetchall()
    
    if not reports:
        query.edit_message_text(
            text="–ù–µ—Ç –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='admin_panel')]])
        )
        return
    
    message = "üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç—á–µ—Ç—ã:\n\n"
    for report in reports:
        message += (
            f"üë§ {report['first_name']} {report['last_name']}\n"
            f"üìÖ {report['report_date'].strftime('%d.%m.%Y')}\n"
            f"üìå –ó–∞–¥–∞—á–∞: {report['description']}\n"
            f"üîß –†–∞–±–æ—Ç–∞: {report['work_type']}\n"
            f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {report['amount']}\n\n"
        )
    
    query.edit_message_text(
        text=message,
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='admin_panel')]])
    )

# –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ - –≤—ã–±–æ—Ä –∑–∞–¥–∞—á–∏
def send_report(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    query.answer()
    
    with get_db_connection() as conn:
        with conn.cursor(cursor_factory=DictCursor) as cursor:
            cursor.execute("SELECT task_id, description FROM tasks WHERE is_active = TRUE ORDER BY created_at DESC")
            tasks = cursor.fetchall()
    
    if not tasks:
        query.edit_message_text(
            text="–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –æ—Ç—á–µ—Ç–∞.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='main_menu')]])
        )
        return ConversationHandler.END
    
    keyboard = []
    for task in tasks:
        keyboard.append([InlineKeyboardButton(task['description'], callback_data=f'task_{task["task_id"]}')])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='main_menu')])
    
    query.edit_message_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –æ—Ç—á–µ—Ç–∞:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return REPORTING_WORK_TYPE

# –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ - –≤—ã–±–æ—Ä –≤–∏–¥–∞ —Ä–∞–±–æ—Ç—ã
def report_work_type(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    query.answer()
    
    task_id = int(query.data.split('_')[1])
    context.user_data['report_task_id'] = task_id
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–∏–¥–∞ —Ä–∞–±–æ—Ç—ã
    keyboard = []
    for i in range(0, len(WORK_TYPES), 2):
        row = []
        if i < len(WORK_TYPES):
            row.append(InlineKeyboardButton(WORK_TYPES[i], callback_data=f'report_work_{i}'))
        if i+1 < len(WORK_TYPES):
            row.append(InlineKeyboardButton(WORK_TYPES[i+1], callback_data=f'report_work_{i+1}'))
        keyboard.append(row)
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='send_report')])
    
    query.edit_message_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ —Ä–∞–±–æ—Ç—ã:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return REPORTING_AMOUNT

# –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ - –≤–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
def report_amount(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    query.answer()
    
    work_type_idx = int(query.data.split('_')[2])
    work_type = WORK_TYPES[work_type_idx]
    context.user_data['report_work_type'] = work_type
    
    query.edit_message_text(
        text=f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã '{work_type}':",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f'task_{context.user_data["report_task_id"]}')]])
    )
    return REPORTING_ADDITIONAL

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
def save_report(update: Update, context: CallbackContext) -> int:
    try:
        amount = int(update.message.text)
    except ValueError:
        update.message.reply_text(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f'task_{context.user_data["report_task_id"]}')]])
        )
        return REPORTING_AMOUNT
    
    task_id = context.user_data['report_task_id']
    work_type = context.user_data['report_work_type']
    user_id = update.message.from_user.id
    report_date = datetime.now().date()
    
    with get_db_connection() as conn:
        with conn.cursor() as cursor:
            cursor.execute(
                "INSERT INTO reports (user_id, task_id, work_type, amount, report_date) VALUES (%s, %s, %s, %s, %s)",
                (user_id, task_id, work_type, amount, report_date)
            )
            conn.commit()
    
    # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ä–∞–±–æ—Ç—É
    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ä–∞–±–æ—Ç—É", callback_data=f'task_{task_id}')],
        [InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]
    ]
    
    update.message.reply_text(
        f"–û—Ç—á–µ—Ç –ø–æ —Ä–∞–±–æ—Ç–µ '{work_type}' –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ {amount} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return ConversationHandler.END

# –û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏–π
def cancel(update: Update, context: CallbackContext) -> int:
    update.message.reply_text(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END

# –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
def delete_old_messages(context: CallbackContext):
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π
    with get_db_connection() as conn:
        with conn.cursor() as cursor:
            cursor.execute("DELETE FROM reports WHERE reported_at < NOW() - INTERVAL '7 days'")
            conn.commit()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
def error_handler(update: Update, context: CallbackContext) -> None:
    logger.error(msg="Exception while handling an update:", exc_info=context.error)
    
    if update.callback_query:
        update.callback_query.edit_message_text(
            text="‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='main_menu')]])
        )
    else:
        update.message.reply_text(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='main_menu')]])
        )

def main() -> None:
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_db()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ Updater –∏ –ø–µ—Ä–µ–¥–∞—á–∞ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
    token = os.getenv('TELEGRAM_TOKEN')
    updater = Updater(token)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    dispatcher = updater.dispatcher
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    dispatcher.add_handler(CommandHandler("start", start))
    
    # ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ ...
    dispatcher.add_handler(CallbackQueryHandler(main_menu, pattern='^main_menu$'))
    dispatcher.add_handler(CallbackQueryHandler(admin_panel, pattern='^admin_panel$'))
    dispatcher.add_handler(CallbackQueryHandler(send_report, pattern='^send_report$'))
    dispatcher.add_handler(CallbackQueryHandler(view_tasks, pattern='^view_tasks$'))
    dispatcher.add_handler(CallbackQueryHandler(manage_users, pattern='^manage_users$'))
    dispatcher.add_handler(CallbackQueryHandler(set_task, pattern='^set_task$'))
    dispatcher.add_handler(CallbackQueryHandler(view_reports, pattern='^view_reports$'))
    

    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—Ä–∞–∑ –≤ –¥–µ–Ω—å)
    job_queue = updater.job_queue
    job_queue.run_daily(delete_old_messages, time=time(hour=3, minute=0))  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ConversationHandler –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∑–∞–¥–∞—á
    admin_task_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(set_task, pattern='^set_task$')],
        states={
            SETTING_TASK: [MessageHandler(Filters.text & ~Filters.command, set_task_description)],
            SETTING_WORK_TYPE: [
                CallbackQueryHandler(set_work_type, pattern='^day_[0-6]$'),
                CallbackQueryHandler(cancel, pattern='^cancel$')
            ],
            SETTING_AMOUNT: [
                CallbackQueryHandler(set_work_amount, pattern='^work_[0-9]+$'),
                MessageHandler(Filters.text & ~Filters.command, save_work_assignment)
            ],
        },
        fallbacks=[
            CallbackQueryHandler(admin_panel, pattern='^admin_panel$'),
            CommandHandler('cancel', cancel)
        ],
        allow_reentry=True
    )
    dispatcher.add_handler(admin_task_handler)
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()






