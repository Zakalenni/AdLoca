import os
import logging
from datetime import datetime
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=os.getenv('BOT_TOKEN'))
dp = Dispatcher()

# –°–æ—Å—Ç–æ—è–Ω–∏—è
class SurveyStates(StatesGroup):
    WAITING_TASK = State()
    WAITING_WORK_TYPE = State()
    WAITING_PROGRESS = State()
    WAITING_QUANTITY = State()
    WAITING_MORE_WORK = State()

class AdminStates(StatesGroup):
    WAITING_TASK_ASSIGNMENT = State()

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
reports_db = {}
tasks_db = {}
user_tasks = {}

# –í–∏–¥—ã —Ä–∞–±–æ—Ç –¥–ª—è –º–µ–±–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
WORK_TYPES = [
    "–†–∞—Å–ø–∏–ª –¥–æ—Å–∫–∏",
    "–§—É–≥–æ–≤–∞–Ω–∏–µ",
    "–†–µ–π—Å–º—É—Å–æ–≤–∞–Ω–∏–µ",
    "–†–∞—Å–ø–∏–ª –Ω–∞ –¥–µ—Ç–∞–ª–∏",
    "–û—Ç–≤–µ—Ä—Å—Ç–∏—è –≤ –ø–ª–∞—Å—Ç—å",
    "–ü—Ä–∏—Å–∞–¥–∫–∞ –æ—Ç–≤–µ—Ä—Å—Ç–∏–π",
    "–§—Ä–µ–∑–µ—Ä–æ–≤–∫–∞ –ø–∞–∑–æ–≤",
    "–§—Ä–µ–∑–µ—Ä–æ–≤–∫–∞ —É–≥–ª–æ–≤",
    "–®–ª–∏—Ñ–æ–≤–∫–∞",
    "–ü–æ–¥—Ä–µ–∑",
    "–°–±–æ—Ä–∫–∞",
    "–î–æ—à–ª–∏—Ñ–æ–≤–∫–∞",
    "–ü–æ–∫—Ä–∞—Å–∫–∞ –∫–∞—Ä–∫–∞—Å–æ–≤",
    "–ü–æ–∫—Ä–∞—Å–∫–∞ –Ω–æ–∂–µ–∫",
    "–ü–æ–∫—Ä–∞—Å–∫–∞ —Ä—É—á–µ–∫",
    "–†–µ–∑ –Ω–∞ –∫–æ—Ä–æ–±–∫–∏",
    "–°–±–æ—Ä–∫–∞ –∫–æ—Ä–æ–±–æ–∫",
    "–£–ø–∞–∫–æ–≤–∫–∞",
    "–§—Ä–µ–∑–µ—Ä–æ–≤–∫–∞ –ø–∞–∑–æ–≤ —Ä—É—á–µ–∫",
    "–†–∞—Å–ø–∏–ª –Ω–∞ —Ä—É—á–∫–∏"
]

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
async def delete_previous_message(message: types.Message):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        await message.delete()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

def get_current_date():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì"""
    return datetime.now().strftime("%d.%m.%Y")

def generate_user_report(user_id: int):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    if user_id not in reports_db or not reports_db[user_id]:
        return "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç—á–µ—Ç–æ–≤"
    
    report = ["üìä <b>–í–∞—à–∏ –æ—Ç—á–µ—Ç—ã</b>\n"]
    for date, records in reports_db[user_id].items():
        report.append(f"\nüìÖ <b>{date}</b>")
        for i, record in enumerate(records, 1):
            report.append(
                f"{i}. {record['work_type']}: "
                f"{record['progress']}% ({record['quantity']} —à—Ç.)"
            )
    return "\n".join(report)

def generate_admin_report():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if not reports_db:
        return "üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é —Ä–∞–±–æ—Ç"
    
    report = ["üìà <b>–°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é —Ä–∞–±–æ—Ç</b>\n"]
    
    for user_id, user_data in reports_db.items():
        report.append(f"\nüë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {user_id}</b>")
        for date, records in user_data.items():
            report.append(f"\n  üìÖ {date}")
            for record in records:
                report.append(
                    f"    ‚Ä¢ {record['work_type']}: "
                    f"{record['progress']}% ({record['quantity']} —à—Ç.)"
                )
    
    return "\n".join(report)

def generate_tasks_report():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –ø–æ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º –∑–∞–¥–∞—á–∞–º"""
    if not tasks_db:
        return "üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á"
    
    report = ["üìã <b>–¢–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏</b>\n"]
    for date, tasks in tasks_db.items():
        report.append(f"\nüìÖ {date}")
        for task in tasks:
            report.append(f"\n  ‚Ä¢ {task['description']}")
            if task['assigned_to']:
                assigned = ", ".join(str(uid) for uid in task['assigned_to'])
                report.append(f"    üë• –ù–∞–∑–Ω–∞—á–µ–Ω–æ: {assigned}")
    return "\n".join(report)

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def get_main_menu_kb():
    """–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é"""
    builder = ReplyKeyboardBuilder()
    builder.add(types.KeyboardButton(text="üìù –ù–æ–≤—ã–π –æ—Ç—á–µ—Ç"))
    builder.add(types.KeyboardButton(text="üìä –ú–æ–∏ –æ—Ç—á–µ—Ç—ã"))
    builder.add(types.KeyboardButton(text="üìã –¢–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏"))
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)

def get_work_types_kb():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤–∏–¥–∞–º–∏ —Ä–∞–±–æ—Ç"""
    builder = ReplyKeyboardBuilder()
    for work_type in WORK_TYPES:
        builder.add(types.KeyboardButton(text=work_type))
    builder.adjust(3)
    return builder.as_markup(resize_keyboard=True)

def get_progress_kb():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
    builder = ReplyKeyboardBuilder()
    for i in range(0, 101, 10):
        builder.add(types.KeyboardButton(text=f"{i}%"))
    builder.adjust(5)
    return builder.as_markup(resize_keyboard=True)

def get_quantity_kb():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º"""
    builder = ReplyKeyboardBuilder()
    for i in [1, 2, 5, 10, 20, 50]:
        builder.add(types.KeyboardButton(text=f"{i} —à—Ç."))
    builder.add(types.KeyboardButton(text="–î—Ä—É–≥–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ"))
    builder.adjust(3)
    return builder.as_markup(resize_keyboard=True)

def get_more_work_kb():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –µ—â–µ —Ä–∞–±–æ—Ç"""
    builder = ReplyKeyboardBuilder()
    builder.add(types.KeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ç—á–µ—Ç"))
    builder.add(types.KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ä–∞–±–æ—Ç—É"))
    builder.adjust(1)
    return builder.as_markup(resize_keyboard=True)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "üè≠ <b>–°–∏—Å—Ç–µ–º–∞ —É—á–µ—Ç–∞ —Ä–∞–±–æ—Ç –º–µ–±–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_menu_kb(),
        parse_mode="HTML"
    )

@dp.message(F.text == "üìù –ù–æ–≤—ã–π –æ—Ç—á–µ—Ç")
async def cmd_new_report(message: types.Message, state: FSMContext):
    await delete_previous_message(message)
    await state.set_state(SurveyStates.WAITING_WORK_TYPE)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã:",
        reply_markup=get_work_types_kb()
    )

@dp.message(F.text == "üìä –ú–æ–∏ –æ—Ç—á–µ—Ç—ã")
async def cmd_my_reports(message: types.Message):
    await delete_previous_message(message)
    report = generate_user_report(message.from_user.id)
    await message.answer(report, parse_mode="HTML")

@dp.message(F.text == "üìã –¢–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏")
async def cmd_current_tasks(message: types.Message):
    await delete_previous_message(message)
    report = generate_tasks_report()
    await message.answer(report, parse_mode="HTML")

@dp.message(Command("admin_report"), F.from_user.id == int(os.getenv('ADMIN_ID')))
async def cmd_admin_report(message: types.Message):
    await delete_previous_message(message)
    report = generate_admin_report()
    await message.answer(report, parse_mode="HTML")

@dp.message(Command("assign_task"), F.from_user.id == int(os.getenv('ADMIN_ID')))
async def cmd_assign_task(message: types.Message, state: FSMContext):
    await delete_previous_message(message)
    await state.set_state(AdminStates.WAITING_TASK_ASSIGNMENT)
    await message.answer(
        "üìå –í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–∞–±–æ—á–∏–º:",
        reply_markup=types.ReplyKeyboardRemove()
    )

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π ---
@dp.message(SurveyStates.WAITING_WORK_TYPE)
async def process_work_type(message: types.Message, state: FSMContext):
    if message.text not in WORK_TYPES:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ —Ä–∞–±–æ—Ç—ã –∏–∑ —Å–ø–∏—Å–∫–∞")
        return
    
    await state.update_data(work_type=message.text)
    await state.set_state(SurveyStates.WAITING_PROGRESS)
    await message.answer(
        "–£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:",
        reply_markup=get_progress_kb()
    )

@dp.message(SurveyStates.WAITING_PROGRESS)
async def process_progress(message: types.Message, state: FSMContext):
    try:
        progress = int(message.text.replace("%", ""))
        if not 0 <= progress <= 100:
            raise ValueError
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç 0 –¥–æ 100")
        return
    
    await state.update_data(progress=progress)
    await state.set_state(SurveyStates.WAITING_QUANTITY)
    await message.answer(
        "–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü:",
        reply_markup=get_quantity_kb()
    )

@dp.message(SurveyStates.WAITING_QUANTITY)
async def process_quantity(message: types.Message, state: FSMContext):
    try:
        if message.text == "–î—Ä—É–≥–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ":
            await message.answer(
                "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ä—É—á–Ω—É—é (—á–∏—Å–ª–æ):",
                reply_markup=types.ReplyKeyboardRemove()
            )
            return
        
        quantity = int(message.text.split()[0])
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")
        return
    
    await state.update_data(quantity=quantity)
    data = await state.get_data()
    
    current_date = get_current_date()
    user_id = message.from_user.id
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    if user_id not in reports_db:
        reports_db[user_id] = {}
    
    if current_date not in reports_db[user_id]:
        reports_db[user_id][current_date] = []
    
    reports_db[user_id][current_date].append({
        "work_type": data["work_type"],
        "progress": data["progress"],
        "quantity": quantity,
        "timestamp": datetime.now().isoformat()
    })
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
    for date, tasks in tasks_db.items():
        for task in tasks:
            if user_id in task['assigned_to'] and data["work_type"] in task['description']:
                task['completed_by'] = task.get('completed_by', [])
                task['completed_by'].append(user_id)
    
    await state.set_state(SurveyStates.WAITING_MORE_WORK)
    await message.answer(
        "‚úÖ –†–∞–±–æ—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—Ç—á–µ—Ç\n\n"
        f"üîß {data['work_type']}\n"
        f"üìà {data['progress']}%\n"
        f"üî¢ {quantity} —à—Ç.",
        reply_markup=get_more_work_kb()
    )

@dp.message(SurveyStates.WAITING_QUANTITY, F.text.regexp(r'^\d+$'))
async def process_custom_quantity(message: types.Message, state: FSMContext):
    await process_quantity(message, state)

@dp.message(SurveyStates.WAITING_MORE_WORK, F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ä–∞–±–æ—Ç—É")
async def add_more_work(message: types.Message, state: FSMContext):
    await state.set_state(SurveyStates.WAITING_WORK_TYPE)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã:",
        reply_markup=get_work_types_kb()
    )

@dp.message(SurveyStates.WAITING_MORE_WORK, F.text == "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ç—á–µ—Ç")
async def finish_report(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "üìã –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–∞–±–æ—Ç—É!",
        reply_markup=get_main_menu_kb()
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    admin_id = os.getenv('ADMIN_ID')
    if admin_id:
        try:
            user_report = generate_user_report(message.from_user.id)
            await bot.send_message(
                chat_id=int(admin_id),
                text=f"üìå –ù–æ–≤—ã–π –æ—Ç—á–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.full_name} (ID: {message.from_user.id})\n\n{user_report}",
                parse_mode="HTML"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")

@dp.message(AdminStates.WAITING_TASK_ASSIGNMENT)
async def process_task_assignment(message: types.Message, state: FSMContext):
    current_date = get_current_date()
    task = {
        "description": message.text,
        "assigned_to": [],
        "created_at": datetime.now().isoformat()
    }
    
    if current_date not in tasks_db:
        tasks_db[current_date] = []
    
    tasks_db[current_date].append(task)
    await state.clear()
    await message.answer(
        "‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!",
        reply_markup=get_main_menu_kb()
    )

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
