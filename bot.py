import os
import logging
from datetime import datetime
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=os.getenv('BOT_TOKEN'))
dp = Dispatcher()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ–ø—Ä–æ—Å–∞
class SurveyStates(StatesGroup):
    WAITING_TASK = State()
    WAITING_WORK_TYPE = State()
    WAITING_PROGRESS = State()

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤
reports_db = {}

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def get_current_weekday():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏"""
    days = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
    return days[datetime.now().weekday()]

def generate_report(user_id: int) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    if user_id not in reports_db or not reports_db[user_id]:
        return "–û—Ç—á–µ—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç"
    
    report = []
    for date, records in reports_db[user_id].items():
        report.append(f"üìÖ <b>{date}</b>")
        for record in records:
            report.append(
                f"  ‚Ä¢ {record['work_type']}: {record['progress']}%"
            )
        report.append("")
    
    return "\n".join(report)

def generate_admin_report():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if not reports_db:
        return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é —Ä–∞–±–æ—Ç"
    
    report = ["üìä <b>–°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é —Ä–∞–±–æ—Ç</b>\n"]
    
    for user_id, user_data in reports_db.items():
        report.append(f"\nüë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {user_id}</b>")
        for date, records in user_data.items():
            report.append(f"\n  üìÖ {date}")
            for record in records:
                report.append(f"    ‚Ä¢ {record['work_type']}: {record['progress']}%")
    
    return "\n".join(report)

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def get_work_types_kb():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Ç–∏–ø–∞–º–∏ —Ä–∞–±–æ—Ç"""
    builder = ReplyKeyboardBuilder()
    builder.add(types.KeyboardButton(text="–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞"))
    builder.add(types.KeyboardButton(text="–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"))
    builder.add(types.KeyboardButton(text="–î–∏–∑–∞–π–Ω"))
    builder.add(types.KeyboardButton(text="–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è"))
    builder.add(types.KeyboardButton(text="–î—Ä—É–≥–æ–µ"))
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)

def get_progress_kb():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
    builder = ReplyKeyboardBuilder()
    for i in range(0, 101, 10):
        builder.add(types.KeyboardButton(text=f"{i}%"))
    builder.adjust(5)
    return builder.as_markup(resize_keyboard=True)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "üìã <b>–°–∏—Å—Ç–µ–º–∞ —É—á–µ—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞–±–æ—Ç</b>\n\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /new_report",
        parse_mode="HTML"
    )

@dp.message(Command("new_report"))
async def cmd_new_report(message: types.Message, state: FSMContext):
    await state.set_state(SurveyStates.WAITING_TASK)
    await message.answer(
        "üìù <b>–ù–æ–≤—ã–π –æ—Ç—á–µ—Ç</b>\n\n"
        "–û–ø–∏—à–∏—Ç–µ –æ–±—â—É—é –∑–∞–¥–∞—á—É, –Ω–∞–¥ –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ:",
        parse_mode="HTML",
        reply_markup=types.ReplyKeyboardRemove()
    )

@dp.message(Command("my_reports"))
async def cmd_my_reports(message: types.Message):
    report = generate_report(message.from_user.id)
    await message.answer(
        f"üìä <b>–í–∞—à–∏ –æ—Ç—á–µ—Ç—ã</b>\n\n{report}",
        parse_mode="HTML"
    )

@dp.message(Command("admin_report"), F.from_user.id == int(os.getenv('ADMIN_ID')))
async def cmd_admin_report(message: types.Message):
    report = generate_admin_report()
    await message.answer(report, parse_mode="HTML")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π ---
@dp.message(SurveyStates.WAITING_TASK)
async def process_task(message: types.Message, state: FSMContext):
    await state.update_data(task=message.text)
    await state.set_state(SurveyStates.WAITING_WORK_TYPE)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ —Ä–∞–±–æ—Ç—ã:",
        reply_markup=get_work_types_kb()
    )

@dp.message(SurveyStates.WAITING_WORK_TYPE)
async def process_work_type(message: types.Message, state: FSMContext):
    await state.update_data(work_type=message.text)
    await state.set_state(SurveyStates.WAITING_PROGRESS)
    await message.answer(
        "–£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:",
        reply_markup=get_progress_kb()
    )

@dp.message(SurveyStates.WAITING_PROGRESS)
async def process_progress(message: types.Message, state: FSMContext):
    try:
        progress = int(message.text.replace("%", ""))
        if not 0 <= progress <= 100:
            raise ValueError
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç 0 –¥–æ 100")
        return
    
    data = await state.get_data()
    current_date = datetime.now().strftime("%d.%m.%Y")
    weekday = get_current_weekday()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    user_id = message.from_user.id
    if user_id not in reports_db:
        reports_db[user_id] = {}
    
    if current_date not in reports_db[user_id]:
        reports_db[user_id][current_date] = []
    
    reports_db[user_id][current_date].append({
        "task": data["task"],
        "work_type": data["work_type"],
        "progress": progress,
        "weekday": weekday
    })
    
    await state.clear()
    await message.answer(
        "‚úÖ <b>–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω</b>\n\n"
        f"üìÖ –î–µ–Ω—å: {weekday}, {current_date}\n"
        f"üìå –ó–∞–¥–∞—á–∞: {data['task']}\n"
        f"üîß –í–∏–¥ —Ä–∞–±–æ—Ç—ã: {data['work_type']}\n"
        f"üìä –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {progress}%",
        parse_mode="HTML",
        reply_markup=types.ReplyKeyboardRemove()
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    admin_id = os.getenv('ADMIN_ID')
    if admin_id:
        try:
            await bot.send_message(
                chat_id=int(admin_id),
                text=f"üìå –ù–æ–≤—ã–π –æ—Ç—á–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.full_name} (ID: {user_id})\n\n"
                     f"üìÖ {weekday}, {current_date}\n"
                     f"üîß {data['work_type']}: {progress}%\n"
                     f"üìù –ó–∞–¥–∞—á–∞: {data['task']}",
                parse_mode="HTML"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
