import os
import logging
from datetime import datetime
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=os.getenv('BOT_TOKEN'))
dp = Dispatcher()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class AdminStates(StatesGroup):
    WAITING_TASK_NAME = State()
    WAITING_WORK_ASSIGNMENT = State()
    WAITING_WORKER_SELECTION = State()

class WorkerStates(StatesGroup):
    WAITING_WORK_SELECTION = State()
    WAITING_PROGRESS_REPORT = State()
    WAITING_QUANTITY_REPORT = State()

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
tasks_db = {}  # {task_id: {name, assigned_works: {work_type: {worker_id: quantity}}}}
reports_db = {}  # {user_id: {date: [{work_type, progress, quantity, task_id}]}}
users_db = {}  # {user_id: {"name": full_name, "username": username}}

# –í–∏–¥—ã —Ä–∞–±–æ—Ç
WORK_TYPES = [
    "–†–∞—Å–ø–∏–ª –¥–æ—Å–∫–∏", "–§—É–≥–æ–≤–∞–Ω–∏–µ", "–†–µ–π—Å–º—É—Å–æ–≤–∞–Ω–∏–µ", "–†–∞—Å–ø–∏–ª –Ω–∞ –¥–µ—Ç–∞–ª–∏",
    "–û—Ç–≤–µ—Ä—Å—Ç–∏—è –≤ –ø–ª–∞—Å—Ç—å", "–ü—Ä–∏—Å–∞–¥–∫–∞ –æ—Ç–≤–µ—Ä—Å—Ç–∏–π", "–§—Ä–µ–∑–µ—Ä–æ–≤–∫–∞ –ø–∞–∑–æ–≤",
    "–§—Ä–µ–∑–µ—Ä–æ–≤–∫–∞ —É–≥–ª–æ–≤", "–®–ª–∏—Ñ–æ–≤–∫–∞", "–ü–æ–¥—Ä–µ–∑", "–°–±–æ—Ä–∫–∞", "–î–æ—à–ª–∏—Ñ–æ–≤–∫–∞",
    "–ü–æ–∫—Ä–∞—Å–∫–∞ –∫–∞—Ä–∫–∞—Å–æ–≤", "–ü–æ–∫—Ä–∞—Å–∫–∞ –Ω–æ–∂–µ–∫", "–ü–æ–∫—Ä–∞—Å–∫–∞ —Ä—É—á–µ–∫",
    "–†–µ–∑ –Ω–∞ –∫–æ—Ä–æ–±–∫–∏", "–°–±–æ—Ä–∫–∞ –∫–æ—Ä–æ–±–æ–∫", "–£–ø–∞–∫–æ–≤–∫–∞",
    "–§—Ä–µ–∑–µ—Ä–æ–≤–∫–∞ –ø–∞–∑–æ–≤ —Ä—É—á–µ–∫", "–†–∞—Å–ø–∏–ª –Ω–∞ —Ä—É—á–∫–∏"
]

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
async def delete_previous_message(message: types.Message):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        await message.delete()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

def get_current_date():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY"""
    return datetime.now().strftime("%d.%m.%Y")

def get_current_weekday():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏"""
    days = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°–∞–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
    return days[datetime.now().weekday()]

def register_user(user: types.User):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç/–æ–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    users_db[user.id] = {
        "name": user.full_name,
        "username": user.username
    }

def get_user_name(user_id: int) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = users_db.get(user_id, {})
    return user.get("name", f"User_{user_id}")

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def get_admin_main_kb():
    """–û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="üìå –ü–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É",
        callback_data="admin_create_task"
    ))
    builder.add(types.InlineKeyboardButton(
        text="üìä –°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç",
        callback_data="admin_get_report"
    ))
    builder.adjust(1)
    return builder.as_markup()

def get_worker_main_kb():
    """–û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞"""
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="üìù –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç",
        callback_data="worker_send_report"
    ))
    builder.add(types.InlineKeyboardButton(
        text="üìã –ú–æ–∏ –æ—Ç—á–µ—Ç—ã",
        callback_data="worker_my_reports"
    ))
    builder.adjust(1)
    return builder.as_markup()

def get_work_types_kb(action: str = "select"):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤–∏–¥–∞–º–∏ —Ä–∞–±–æ—Ç"""
    builder = InlineKeyboardBuilder()
    for work in WORK_TYPES:
        builder.add(types.InlineKeyboardButton(
            text=work,
            callback_data=f"{action}_{work}"
        ))
    builder.adjust(2)
    return builder.as_markup()

def get_workers_kb():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Ä–∞–±–æ—Ç–Ω–∏–∫–∞–º–∏"""
    builder = InlineKeyboardBuilder()
    for user_id, user_data in users_db.items():
        builder.add(types.InlineKeyboardButton(
            text=user_data["name"],
            callback_data=f"assign_{user_id}"
        ))
    builder.adjust(1)
    return builder.as_markup()

def get_progress_kb():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
    builder = ReplyKeyboardBuilder()
    for i in range(0, 101, 10):
        builder.add(types.KeyboardButton(text=f"{i}%"))
    builder.adjust(5)
    return builder.as_markup(resize_keyboard=True)

# --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤ ---
def generate_worker_report(user_id: int) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –¥–ª—è —Ä–∞–±–æ—Ç–Ω–∏–∫–∞"""
    if user_id not in reports_db or not reports_db[user_id]:
        return "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç—á–µ—Ç–æ–≤"
    
    report = ["üìä <b>–í–∞—à–∏ –æ—Ç—á–µ—Ç—ã</b>\n"]
    for date, records in reports_db[user_id].items():
        report.append(f"\nüìÖ <b>{date}</b>")
        for record in records:
            task_name = tasks_db.get(record.get("task_id", ""), {}).get("name", "–û–±—â–∞—è –∑–∞–¥–∞—á–∞")
            report.append(
                f"\n  ‚Ä¢ {task_name}: {record['work_type']}\n"
                f"    ‚ñ∏ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {record['progress']}%\n"
                f"    ‚ñ∏ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {record.get('quantity', 'N/A')}"
            )
    
    return "\n".join(report)

def generate_admin_report() -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if not reports_db:
        return "üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é —Ä–∞–±–æ—Ç"
    
    report = ["üìä <b>–°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é —Ä–∞–±–æ—Ç</b>\n"]
    
    # –û—Ç—á–µ—Ç –ø–æ –∑–∞–¥–∞—á–∞–º
    report.append("\n<b>–¢–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏:</b>")
    for task_id, task_data in tasks_db.items():
        report.append(f"\nüìå <b>{task_data['name']}</b> (ID: {task_id})")
        for work_type, workers in task_data.get("assigned_works", {}).items():
            report.append(f"\n  üîß {work_type}:")
            for worker_id, quantity in workers.items():
                report.append(f"    üë∑ {get_user_name(worker_id)}: {quantity} —à—Ç.")
    
    # –û—Ç—á–µ—Ç –ø–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é
    report.append("\n\n<b>–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç:</b>")
    for user_id, user_data in reports_db.items():
        report.append(f"\nüë∑ <b>{get_user_name(user_id)}</b>")
        for date, records in user_data.items():
            report.append(f"\n  üìÖ {date}")
            for record in records:
                task_name = tasks_db.get(record.get("task_id", ""), {}).get("name", "–û–±—â–∞—è –∑–∞–¥–∞—á–∞")
                report.append(
                    f"    ‚Ä¢ {task_name}: {record['work_type']}\n"
                    f"      ‚ñ∏ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {record['progress']}%\n"
                    f"      ‚ñ∏ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {record.get('quantity', 'N/A')}"
                )
    
    return "\n".join(report)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    register_user(message.from_user)
    
    if str(message.from_user.id) == os.getenv('ADMIN_ID'):
        await message.answer(
            "üë®‚Äçüíª <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>",
            reply_markup=get_admin_main_kb(),
            parse_mode="HTML"
        )
    else:
        await message.answer(
            "üë∑ <b>–ü–∞–Ω–µ–ª—å —Ä–∞–±–æ—Ç–Ω–∏–∫–∞</b>",
            reply_markup=get_worker_main_kb(),
            parse_mode="HTML"
        )

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ---
@dp.callback_query(F.data == "admin_create_task")
async def admin_create_task(callback: types.CallbackQuery, state: FSMContext):
    await delete_previous_message(callback.message)
    await callback.message.answer(
        "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏:",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await state.set_state(AdminStates.WAITING_TASK_NAME)
    await callback.answer()

@dp.message(AdminStates.WAITING_TASK_NAME)
async def process_task_name(message: types.Message, state: FSMContext):
    task_id = str(datetime.now().timestamp())
    tasks_db[task_id] = {
        "name": message.text,
        "assigned_works": {}
    }
    await state.update_data(task_id=task_id)
    await state.set_state(AdminStates.WAITING_WORK_ASSIGNMENT)
    await message.answer(
        f"‚úÖ –ó–∞–¥–∞—á–∞ '{message.text}' —Å–æ–∑–¥–∞–Ω–∞\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ —Ä–∞–±–æ—Ç—ã –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:",
        reply_markup=get_work_types_kb("assign_work")
    )

@dp.callback_query(F.data.startswith("assign_work_"), AdminStates.WAITING_WORK_ASSIGNMENT)
async def select_work_for_assignment(callback: types.CallbackQuery, state: FSMContext):
    work_type = callback.data.split("_", 2)[2]
    await state.update_data(work_type=work_type)
    await delete_previous_message(callback.message)
    await callback.message.answer(
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è '{work_type}':",
        reply_markup=get_workers_kb()
    )
    await state.set_state(AdminStates.WAITING_WORKER_SELECTION)
    await callback.answer()

@dp.callback_query(F.data.startswith("assign_"), AdminStates.WAITING_WORKER_SELECTION)
async def assign_worker_to_work(callback: types.CallbackQuery, state: FSMContext):
    worker_id = int(callback.data.split("_")[1])
    data = await state.get_data()
    
    task_id = data["task_id"]
    work_type = data["work_type"]
    
    if task_id not in tasks_db:
        await callback.message.answer("–û—à–∏–±–∫–∞: –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        await state.clear()
        return
    
    if "assigned_works" not in tasks_db[task_id]:
        tasks_db[task_id]["assigned_works"] = {}
    
    if work_type not in tasks_db[task_id]["assigned_works"]:
        tasks_db[task_id]["assigned_works"][work_type] = {}
    
    await callback.message.answer(
        f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è {work_type} (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):",
        reply_markup=types.ReplyKeyboardRemove()
    )
    
    await state.update_data(worker_id=worker_id)
    await callback.answer()

@dp.message(AdminStates.WAITING_WORKER_SELECTION)
async def process_work_quantity(message: types.Message, state: FSMContext):
    try:
        quantity = int(message.text)
        if quantity <= 0:
            raise ValueError
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ")
        return
    
    data = await state.get_data()
    task_id = data["task_id"]
    work_type = data["work_type"]
    worker_id = data["worker_id"]
    
    tasks_db[task_id]["assigned_works"][work_type][worker_id] = quantity
    
    worker_name = get_user_name(worker_id)
    await message.answer(
        f"‚úÖ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ:\n"
        f"üë∑ –†–∞–±–æ—Ç–Ω–∏–∫: {worker_name}\n"
        f"üîß –†–∞–±–æ—Ç–∞: {work_type}\n"
        f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}",
        reply_markup=get_admin_main_kb()
    )
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–∞–±–æ—Ç–Ω–∏–∫–∞
    try:
        await bot.send_message(
            chat_id=worker_id,
            text=f"üìå –í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞:\n\n"
                 f"üìù –ó–∞–¥–∞—á–∞: {tasks_db[task_id]['name']}\n"
                 f"üîß –í–∏–¥ —Ä–∞–±–æ—Ç—ã: {work_type}\n"
                 f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}",
            reply_markup=get_worker_main_kb()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–Ω–∏–∫–∞: {e}")
    
    await state.clear()

@dp.callback_query(F.data == "admin_get_report")
async def admin_get_report(callback: types.CallbackQuery):
    await delete_previous_message(callback.message)
    report = generate_admin_report()
    await callback.message.answer(report, parse_mode="HTML")
    await callback.answer()

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞ ---
@dp.callback_query(F.data == "worker_send_report")
async def worker_send_report(callback: types.CallbackQuery, state: FSMContext):
    await delete_previous_message(callback.message)
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã:",
        reply_markup=get_work_types_kb("report_work")
    )
    await state.set_state(WorkerStates.WAITING_WORK_SELECTION)
    await callback.answer()

@dp.callback_query(F.data.startswith("report_work_"), WorkerStates.WAITING_WORK_SELECTION)
async def select_work_for_report(callback: types.CallbackQuery, state: FSMContext):
    work_type = callback.data.split("_", 2)[2]
    await state.update_data(work_type=work_type)
    await delete_previous_message(callback.message)
    await callback.message.answer(
        f"–£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è '{work_type}':",
        reply_markup=get_progress_kb()
    )
    await state.set_state(WorkerStates.WAITING_PROGRESS_REPORT)
    await callback.answer()

@dp.message(WorkerStates.WAITING_PROGRESS_REPORT)
async def process_progress_report(message: types.Message, state: FSMContext):
    try:
        progress = int(message.text.replace("%", ""))
        if not 0 <= progress <= 100:
            raise ValueError
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç 0 –¥–æ 100")
        return
    
    await state.update_data(progress=progress)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await state.set_state(WorkerStates.WAITING_QUANTITY_REPORT)

@dp.message(WorkerStates.WAITING_QUANTITY_REPORT)
async def process_quantity_report(message: types.Message, state: FSMContext):
    try:
        quantity = int(message.text)
        if quantity <= 0:
            raise ValueError
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ")
        return
    
    data = await state.get_data()
    user_id = message.from_user.id
    current_date = get_current_date()
    
    if user_id not in reports_db:
        reports_db[user_id] = {}
    
    if current_date not in reports_db[user_id]:
        reports_db[user_id][current_date] = []
    
    # –ù–∞—Ö–æ–¥–∏–º –∑–∞–¥–∞—á—É, –∫ –∫–æ—Ç–æ—Ä–æ–π –æ—Ç–Ω–æ—Å–∏—Ç—Å—è —ç—Ç–∞ —Ä–∞–±–æ—Ç–∞
    task_id = None
    for t_id, task in tasks_db.items():
        if data["work_type"] in task.get("assigned_works", {}):
            if user_id in task["assigned_works"][data["work_type"]]:
                task_id = t_id
                break
    
    reports_db[user_id][current_date].append({
        "work_type": data["work_type"],
        "progress": data["progress"],
        "quantity": quantity,
        "task_id": task_id
    })
    
    await message.answer(
        "‚úÖ <b>–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω</b>\n\n"
        f"üìÖ –î–∞—Ç–∞: {current_date}\n"
        f"üîß –í–∏–¥ —Ä–∞–±–æ—Ç—ã: {data['work_type']}\n"
        f"üìä –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {data['progress']}%\n"
        f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}",
        parse_mode="HTML",
        reply_markup=get_worker_main_kb()
    )
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    admin_id = os.getenv('ADMIN_ID')
    if admin_id:
        try:
            task_name = tasks_db.get(task_id, {}).get("name", "–û–±—â–∞—è –∑–∞–¥–∞—á–∞") if task_id else "–û–±—â–∞—è –∑–∞–¥–∞—á–∞"
            await bot.send_message(
                chat_id=int(admin_id),
                text=f"üìå –ù–æ–≤—ã–π –æ—Ç—á–µ—Ç –æ—Ç {message.from_user.full_name}\n\n"
                     f"üìÖ {current_date}\n"
                     f"üìù –ó–∞–¥–∞—á–∞: {task_name}\n"
                     f"üîß {data['work_type']}\n"
                     f"üìä {data['progress']}%, {quantity} —à—Ç.",
                parse_mode="HTML"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞: {e}")
    
    await state.clear()

@dp.callback_query(F.data == "worker_my_reports")
async def worker_my_reports(callback: types.CallbackQuery):
    await delete_previous_message(callback.message)
    report = generate_worker_report(callback.from_user.id)
    await callback.message.answer(report, parse_mode="HTML")
    await callback.answer()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
