import os
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=os.getenv('BOT_TOKEN'))
dp = Dispatcher()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class OrderStates(StatesGroup):
    WAITING_FOR_ADDRESS = State()
    WAITING_FOR_PHONE = State()

# "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö" - –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ä–µ–∞–ª—å–Ω–æ–π –ë–î
products = {
    1: {"name": "–î–∏–≤–∞–Ω —É–≥–ª–æ–≤–æ–π", "price": 29999, "description": "–ú—è–≥–∫–∏–π —É–≥–ª–æ–≤–æ–π –¥–∏–≤–∞–Ω –∏–∑ —ç–∫–æ–∫–æ–∂–∏", "category": "–î–∏–≤–∞–Ω—ã"},
    2: {"name": "–ö—Ä–µ—Å–ª–æ –æ—Ñ–∏—Å–Ω–æ–µ", "price": 14999, "description": "–≠—Ä–≥–æ–Ω–æ–º–∏—á–Ω–æ–µ –∫—Ä–µ—Å–ª–æ —Å —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∫–æ–π", "category": "–ö—Ä–µ—Å–ª–∞"},
    3: {"name": "–°—Ç–æ–ª –æ–±–µ–¥–µ–Ω–Ω—ã–π", "price": 24999, "description": "–î–µ—Ä–µ–≤—è–Ω–Ω—ã–π —Å—Ç–æ–ª –Ω–∞ 6 –ø–µ—Ä—Å–æ–Ω", "category": "–°—Ç–æ–ª—ã"},
}

# –ö–æ—Ä–∑–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ)
user_carts = {}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def main_menu_kb():
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="üõãÔ∏è –ö–∞—Ç–∞–ª–æ–≥", callback_data="catalog"))
    builder.add(types.InlineKeyboardButton(text="üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data="cart"))
    builder.add(types.InlineKeyboardButton(text="üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contacts"))
    builder.adjust(1)
    return builder.as_markup()

def categories_kb():
    categories = set(product["category"] for product in products.values())
    builder = InlineKeyboardBuilder()
    for category in categories:
        builder.add(types.InlineKeyboardButton(text=category, callback_data=f"category_{category}"))
    builder.add(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu"))
    builder.adjust(1)
    return builder.as_markup()

def products_kb(category):
    builder = InlineKeyboardBuilder()
    for product_id, product in products.items():
        if product["category"] == category:
            builder.add(types.InlineKeyboardButton(
                text=f"{product['name']} - {product['price']//100} —Ä—É–±.", 
                callback_data=f"product_{product_id}"
            ))
    builder.add(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="catalog"))
    builder.adjust(1)
    return builder.as_markup()

def product_kb(product_id):
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="‚ûï –í –∫–æ—Ä–∑–∏–Ω—É", callback_data=f"add_{product_id}"))
    builder.add(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"category_{products[product_id]['category']}"))
    builder.adjust(1)
    return builder.as_markup()

def cart_kb():
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="üöÄ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="checkout"))
    builder.add(types.InlineKeyboardButton(text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="clear_cart"))
    builder.add(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu"))
    builder.adjust(1)
    return builder.as_markup()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "üè† –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–±–µ–ª—å–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω '–£—é—Ç–Ω—ã–π –î–æ–º'!\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –º–µ–±–µ–ª—å –¥–ª—è –≤–∞—à–µ–≥–æ –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞.",
        reply_markup=main_menu_kb()
    )

@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    await message.answer(
        "‚ÑπÔ∏è –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:\n\n"
        "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
        "/cart - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ—Ä–∑–∏–Ω—É\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–ª–±—ç–∫–æ–≤
@dp.callback_query(F.data == "main_menu")
async def main_menu(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=main_menu_kb()
    )
    await callback.answer()

@dp.callback_query(F.data == "catalog")
async def show_catalog(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "üõãÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=categories_kb()
    )
    await callback.answer()

@dp.callback_query(F.data.startswith("category_"))
async def show_category_products(callback: types.CallbackQuery):
    category = callback.data.split("_")[1]
    await callback.message.edit_text(
        f"üì¶ –¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}':",
        reply_markup=products_kb(category)
    )
    await callback.answer()

@dp.callback_query(F.data.startswith("product_"))
async def show_product(callback: types.CallbackQuery):
    product_id = int(callback.data.split("_")[1])
    product = products[product_id]
    await callback.message.edit_text(
        f"üõãÔ∏è <b>{product['name']}</b>\n\n"
        f"üíµ –¶–µ–Ω–∞: {product['price']//100} —Ä—É–±.\n\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {product['description']}\n"
        f"üì¶ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {product['category']}",
        reply_markup=product_kb(product_id)
    )
    await callback.answer()

@dp.callback_query(F.data.startswith("add_"))
async def add_to_cart(callback: types.CallbackQuery):
    product_id = int(callback.data.split("_")[1])
    user_id = callback.from_user.id
    
    if user_id not in user_carts:
        user_carts[user_id] = {}
    
    if product_id not in user_carts[user_id]:
        user_carts[user_id][product_id] = 0
    
    user_carts[user_id][product_id] += 1
    await callback.answer(f"{products[product_id]['name']} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!")

@dp.callback_query(F.data == "cart")
async def show_cart(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if user_id not in user_carts or not user_carts[user_id]:
        await callback.message.edit_text(
            "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞",
            reply_markup=main_menu_kb()
        )
        await callback.answer()
        return
    
    cart_text = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n"
    total = 0
    
    for product_id, quantity in user_carts[user_id].items():
        product = products[product_id]
        price = product["price"] * quantity
        total += price
        cart_text += f"üõãÔ∏è {product['name']}\n"
        cart_text += f"üí∞ {product['price']//100} —Ä—É–±. x {quantity} = {price//100} —Ä—É–±.\n\n"
    
    cart_text += f"üíµ –ò—Ç–æ–≥–æ: {total//100} —Ä—É–±."
    
    await callback.message.edit_text(
        cart_text,
        reply_markup=cart_kb()
    )
    await callback.answer()

@dp.callback_query(F.data == "clear_cart")
async def clear_cart(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if user_id in user_carts:
        user_carts[user_id] = {}
    await callback.answer("–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞!")
    await show_cart(callback)

@dp.callback_query(F.data == "checkout")
async def start_checkout(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏:",
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[[
                types.InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="cart")
            ]]
        )
    )
    await state.set_state(OrderStates.WAITING_FOR_ADDRESS)
    await callback.answer()

@dp.message(OrderStates.WAITING_FOR_ADDRESS)
async def process_address(message: types.Message, state: FSMContext):
    await state.update_data(address=message.text)
    await message.answer(
        "üìû –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[[
                types.InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="cart")
            ]]
        )
    )
    await state.set_state(OrderStates.WAITING_FOR_PHONE)

@dp.message(OrderStates.WAITING_FOR_PHONE)
async def process_phone(message: types.Message, state: FSMContext):
    data = await state.get_data()
    address = data.get("address")
    phone = message.text
    user_id = message.from_user.id
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–∫–∞–∑
    order_text = "‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n\n"
    order_text += f"üè† –ê–¥—Ä–µ—Å: {address}\n"
    order_text += f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n\n"
    order_text += "üõí –°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:\n"
    
    total = 0
    for product_id, quantity in user_carts[user_id].items():
        product = products[product_id]
        price = product["price"] * quantity
        total += price
        order_text += f"  - {product['name']} x{quantity} = {price//100} —Ä—É–±.\n"
    
    order_text += f"\nüíµ –ò—Ç–æ–≥–æ: {total//100} —Ä—É–±."
    
    await message.answer(
        order_text,
        reply_markup=main_menu_kb()
    )
    
    # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
    user_carts[user_id] = {}
    await state.clear()

@dp.callback_query(F.data == "contacts")
async def show_contacts(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "üìû –ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:\n\n"
        "üè¢ –ê–¥—Ä–µ—Å: –≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ú–µ–±–µ–ª—å–Ω–∞—è, 42\n"
        "üìû –¢–µ–ª–µ—Ñ–æ–Ω: +7 (495) 123-45-67\n"
        "üïí –ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã: –ü–Ω-–ü—Ç 10:00-20:00, –°–±-–í—Å 11:00-18:00\n\n"
        "üìç –ú—ã –Ω–∞ –∫–∞—Ä—Ç–µ: https://yandex.ru/maps/-/CDRrV0~t",
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[[
                types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
            ]]
        )
    )
    await callback.answer()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())