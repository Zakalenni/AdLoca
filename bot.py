import os
import logging
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from dotenv import load_dotenv
import asyncpg
import ssl

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=os.getenv('BOT_TOKEN'))
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# SSL –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è PostgreSQL
ssl_ctx = ssl.create_default_context()
ssl_ctx.check_hostname = False
ssl_ctx.verify_mode = ssl.CERT_NONE

# –°–æ—Å—Ç–æ—è–Ω–∏—è
class AdminStates(StatesGroup):
    WAITING_TASK_NAME = State()
    WAITING_WORK_TYPE = State()
    WAITING_QUANTITY = State()
    WAITING_USER_SELECTION = State()
    
class UserStates(StatesGroup):
    WAITING_WORK_SELECTION = State()
    WAITING_QUANTITY_DONE = State()
    WAITING_REPORT_CONFIRMATION = State()

# –í–∏–¥—ã —Ä–∞–±–æ—Ç
WORK_TYPES = [
    "–†–∞—Å–ø–∏–ª –¥–æ—Å–∫–∏", "–§—É–≥–æ–≤–∞–Ω–∏–µ", "–†–µ–π—Å–º—É—Å–æ–≤–∞–Ω–∏–µ", "–†–∞—Å–ø–∏–ª –Ω–∞ –¥–µ—Ç–∞–ª–∏",
    "–û—Ç–≤–µ—Ä—Å—Ç–∏—è –≤ –ø–ª–∞—Å—Ç—å", "–ü—Ä–∏—Å–∞–¥–∫–∞ –æ—Ç–≤–µ—Ä—Å—Ç–∏–π", "–§—Ä–µ–∑–µ—Ä–æ–≤–∫–∞ –ø–∞–∑–æ–≤",
    "–§—Ä–µ–∑–µ—Ä–æ–≤–∫–∞ —É–≥–ª–æ–≤", "–®–ª–∏—Ñ–æ–≤–∫–∞", "–ü–æ–¥—Ä–µ–∑", "–°–±–æ—Ä–∫–∞", "–î–æ—à–ª–∏—Ñ–æ–≤–∫–∞",
    "–ü–æ–∫—Ä–∞—Å–∫–∞ –∫–∞—Ä–∫–∞—Å–æ–≤", "–ü–æ–∫—Ä–∞—Å–∫–∞ –Ω–æ–∂–µ–∫", "–ü–æ–∫—Ä–∞—Å–∫–∞ —Ä—É—á–µ–∫",
    "–†–µ–∑ –Ω–∞ –∫–æ—Ä–æ–±–∫–∏", "–°–±–æ—Ä–∫–∞ –∫–æ—Ä–æ–±–æ–∫", "–£–ø–∞–∫–æ–≤–∫–∞", "–§—Ä–µ–∑–µ—Ä–æ–≤–∫–∞ –ø–∞–∑–æ–≤ —Ä—É—á–µ–∫",
    "–†–∞—Å–ø–∏–ª –Ω–∞ —Ä—É—á–∫–∏"
]

# --- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL ---
async def create_db_connection():
    return await asyncpg.connect(
        host=os.getenv('DB_HOST'),
        port=os.getenv('DB_PORT'),
        user=os.getenv('DB_USER'),
        password=os.getenv('DB_PASSWORD'),
        database=os.getenv('DB_NAME'),
        ssl=ssl_ctx
    )

async def init_db():
    conn = await create_db_connection()
    try:
        await conn.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id BIGINT PRIMARY KEY,
                username TEXT,
                full_name TEXT,
                is_admin BOOLEAN DEFAULT FALSE,
                is_active BOOLEAN DEFAULT TRUE
            )
        ''')
        
        await conn.execute('''
            CREATE TABLE IF NOT EXISTS weekly_tasks (
                task_id SERIAL PRIMARY KEY,
                task_name TEXT NOT NULL,
                work_type TEXT NOT NULL,
                total_quantity INTEGER NOT NULL,
                start_date DATE NOT NULL,
                end_date DATE NOT NULL,
                created_at TIMESTAMP DEFAULT NOW()
            )
        ''')
        
        await conn.execute('''
            CREATE TABLE IF NOT EXISTS user_tasks (
                id SERIAL PRIMARY KEY,
                user_id BIGINT REFERENCES users(user_id),
                task_id INTEGER REFERENCES weekly_tasks(task_id),
                quantity_done INTEGER DEFAULT 0,
                report_date DATE NOT NULL,
                created_at TIMESTAMP DEFAULT NOW()
            )
        ''')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        admin_id = os.getenv('ADMIN_ID')
        if admin_id:
            await conn.execute('''
                INSERT INTO users (user_id, is_admin, is_active)
                VALUES ($1, TRUE, TRUE)
                ON CONFLICT (user_id) DO UPDATE SET is_admin = TRUE
            ''', int(admin_id))
            
    finally:
        await conn.close()

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
async def delete_previous_message(message: types.Message):
    try:
        await message.delete()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

def get_current_week_dates():
    today = datetime.now()
    start = today - timedelta(days=today.weekday())
    end = start + timedelta(days=6)
    return start.date(), end.date()

async def get_user_name(user_id: int) -> str:
    conn = await create_db_connection()
    try:
        user = await conn.fetchrow('SELECT full_name FROM users WHERE user_id = $1', user_id)
        return user['full_name'] if user else f"ID: {user_id}"
    finally:
        await conn.close()

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def get_main_menu_kb(is_admin: bool = False):
    builder = ReplyKeyboardBuilder()
    builder.add(types.KeyboardButton(text="üìù –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç"))
    builder.add(types.KeyboardButton(text="üìä –ú–æ–∏ –æ—Ç—á–µ—Ç—ã"))
    if is_admin:
        builder.add(types.KeyboardButton(text="üë®‚Äçüíª –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ"))
    builder.adjust(1)
    return builder.as_markup(resize_keyboard=True)

def get_work_types_kb():
    builder = ReplyKeyboardBuilder()
    for work in WORK_TYPES:
        builder.add(types.KeyboardButton(text=work))
    builder.add(types.KeyboardButton(text="üîô –ù–∞–∑–∞–¥"))
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)

def get_admin_menu_kb():
    builder = ReplyKeyboardBuilder()
    builder.add(types.KeyboardButton(text="üìå –ü–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É"))
    builder.add(types.KeyboardButton(text="üìã –°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç"))
    builder.add(types.KeyboardButton(text="üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"))
    builder.add(types.KeyboardButton(text="üîô –ù–∞–∑–∞–¥"))
    builder.adjust(1)
    return builder.as_markup(resize_keyboard=True)

def get_back_kb():
    builder = ReplyKeyboardBuilder()
    builder.add(types.KeyboardButton(text="üîô –ù–∞–∑–∞–¥"))
    return builder.as_markup(resize_keyboard=True)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    conn = await create_db_connection()
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        user = await conn.fetchrow(
            'SELECT is_active, is_admin FROM users WHERE user_id = $1', 
            message.from_user.id
        )
        
        if not user or not user['is_active']:
            await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return
            
        is_admin = user['is_admin']
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        await conn.execute('''
            INSERT INTO users (user_id, username, full_name, is_active)
            VALUES ($1, $2, $3, TRUE)
            ON CONFLICT (user_id) DO UPDATE SET
                username = EXCLUDED.username,
                full_name = EXCLUDED.full_name,
                is_active = TRUE
        ''', message.from_user.id, message.from_user.username, message.from_user.full_name)
        
        await message.answer(
            f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.full_name}!\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_menu_kb(is_admin)
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        await conn.close()

# ... [–æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏]

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await init_db()
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
