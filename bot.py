import os
import logging
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=os.getenv('BOT_TOKEN'))
dp = Dispatcher()

# –°–æ—Å—Ç–æ—è–Ω–∏—è
class SurveyStates(StatesGroup):
    WAITING_TASK = State()
    WAITING_WORK_TYPE = State()
    WAITING_PROGRESS = State()
    WAITING_QUANTITY = State()
    ADMIN_ADD_TASK = State()
    ADMIN_ADD_WORKERS = State()
    ADMIN_MANAGE_USERS = State()

# –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
reports_db = {}
tasks_db = {}
allowed_users = set()
user_names = {}

# –í–∏–¥—ã —Ä–∞–±–æ—Ç
WORK_TYPES = [
    "–†–∞—Å–ø–∏–ª –¥–æ—Å–∫–∏", "–§—É–≥–æ–≤–∞–Ω–∏–µ", "–†–µ–π—Å–º—É—Å–æ–≤–∞–Ω–∏–µ", "–†–∞—Å–ø–∏–ª –Ω–∞ –¥–µ—Ç–∞–ª–∏",
    "–û—Ç–≤–µ—Ä—Å—Ç–∏—è –≤ –ø–ª–∞—Å—Ç—å", "–ü—Ä–∏—Å–∞–¥–∫–∞ –æ—Ç–≤–µ—Ä—Å—Ç–∏–π", "–§—Ä–µ–∑–µ—Ä–æ–≤–∫–∞ –ø–∞–∑–æ–≤",
    "–§—Ä–µ–∑–µ—Ä–æ–≤–∫–∞ —É–≥–ª–æ–≤", "–®–ª–∏—Ñ–æ–≤–∫–∞", "–ü–æ–¥—Ä–µ–∑", "–°–±–æ—Ä–∫–∞", "–î–æ—à–ª–∏—Ñ–æ–≤–∫–∞",
    "–ü–æ–∫—Ä–∞—Å–∫–∞ –∫–∞—Ä–∫–∞—Å–æ–≤", "–ü–æ–∫—Ä–∞—Å–∫–∞ –Ω–æ–∂–µ–∫", "–ü–æ–∫—Ä–∞—Å–∫–∞ —Ä—É—á–µ–∫",
    "–†–µ–∑ –Ω–∞ –∫–æ—Ä–æ–±–∫–∏", "–°–±–æ—Ä–∫–∞ –∫–æ—Ä–æ–±–æ–∫", "–£–ø–∞–∫–æ–≤–∫–∞",
    "–§—Ä–µ–∑–µ—Ä–æ–≤–∫–∞ –ø–∞–∑–æ–≤ —Ä—É—á–µ–∫", "–†–∞—Å–ø–∏–ª –Ω–∞ —Ä—É—á–∫–∏"
]

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def get_current_date():
    return datetime.now().strftime("%d.%m.%Y")

def get_weekday():
    days = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
    return days[datetime.now().weekday()]

async def delete_previous_message(chat_id: int, message_id: int):
    try:
        await bot.delete_message(chat_id, message_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

def generate_user_report(user_id: int):
    if user_id not in reports_db:
        return "–û—Ç—á–µ—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç"
    
    report = []
    for date, records in reports_db[user_id].items():
        report.append(f"üìÖ <b>{date}</b>")
        for record in records:
            report.append(
                f"  ‚Ä¢ {record['work_type']}: {record['progress']}% ({record.get('quantity', 'N/A')} —à—Ç)"
            )
    return "\n".join(report)

def generate_admin_report():
    if not reports_db:
        return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é —Ä–∞–±–æ—Ç"
    
    report = ["üìä <b>–°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç</b>\n"]
    for user_id, user_data in reports_db.items():
        name = user_names.get(user_id, f"ID:{user_id}")
        report.append(f"\nüë§ <b>{name}</b>")
        for date, records in user_data.items():
            report.append(f"\n  üìÖ {date}")
            for record in records:
                report.append(f"    ‚Ä¢ {record['work_type']}: {record['progress']}% ({record.get('quantity', 'N/A')} —à—Ç)")
    
    return "\n".join(report)

def generate_tasks_report():
    if not tasks_db:
        return "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á"
    
    report = ["üìå <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏</b>\n"]
    for task_id, task in tasks_db.items():
        report.append(f"\nüîπ <b>–ó–∞–¥–∞—á–∞ {task_id}</b>: {task['description']}")
        for work_type, details in task['works'].items():
            report.append(f"  ‚Ä¢ {work_type}: {details['assigned']} –∏–∑ {details['total']}")
    return "\n".join(report)

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def get_main_kb(user_id: int):
    builder = ReplyKeyboardBuilder()
    builder.add(types.KeyboardButton(text="üìù –ù–æ–≤—ã–π –æ—Ç—á–µ—Ç"))
    builder.add(types.KeyboardButton(text="üìä –ú–æ–∏ –æ—Ç—á–µ—Ç—ã"))
    if str(user_id) == os.getenv('ADMIN_ID'):
        builder.add(types.KeyboardButton(text="üë®‚Äçüíº –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ"))
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)

def get_admin_kb():
    builder = ReplyKeyboardBuilder()
    builder.add(types.KeyboardButton(text="üìå –ü–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É"))
    builder.add(types.KeyboardButton(text="üìä –°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç"))
    builder.add(types.KeyboardButton(text="üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"))
    builder.add(types.KeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á"))
    builder.add(types.KeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)

def get_work_types_kb():
    builder = ReplyKeyboardBuilder()
    for work in WORK_TYPES:
        builder.add(types.KeyboardButton(text=work))
    builder.adjust(3)
    return builder.as_markup(resize_keyboard=True)

def get_progress_kb():
    builder = ReplyKeyboardBuilder()
    for i in range(0, 101, 10):
        builder.add(types.KeyboardButton(text=f"{i}%"))
    builder.adjust(5)
    return builder.as_markup(resize_keyboard=True)

def get_quantity_kb():
    builder = ReplyKeyboardBuilder()
    for i in [1, 5, 10, 20, 50, 100]:
        builder.add(types.KeyboardButton(text=str(i)))
    builder.add(types.KeyboardButton(text="–î—Ä—É–≥–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ"))
    builder.adjust(3)
    return builder.as_markup(resize_keyboard=True)

def get_users_kb():
    builder = InlineKeyboardBuilder()
    for user_id, name in user_names.items():
        builder.add(types.InlineKeyboardButton(
            text=f"{'‚úÖ' if user_id in allowed_users else '‚ùå'} {name}",
            callback_data=f"toggle_user_{user_id}"
        ))
    builder.adjust(1)
    return builder.as_markup()

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    user_id = message.from_user.id
    user_names[user_id] = message.from_user.full_name
    
    await message.answer(
        "üè≠ <b>–°–∏—Å—Ç–µ–º–∞ —É—á–µ—Ç–∞ —Å—Ç–æ–ª—è—Ä–Ω—ã—Ö —Ä–∞–±–æ—Ç</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_kb(user_id),
        parse_mode="HTML"
    )
    await delete_previous_message(message.chat.id, message.message_id)

@dp.message(F.text == "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def cmd_main_menu(message: types.Message, state: FSMContext):
    await state.clear()
    await cmd_start(message, state)

@dp.message(F.text == "üìù –ù–æ–≤—ã–π –æ—Ç—á–µ—Ç")
async def cmd_new_report(message: types.Message, state: FSMContext):
    if message.from_user.id not in allowed_users and str(message.from_user.id) != os.getenv('ADMIN_ID'):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        return
    
    await state.set_state(SurveyStates.WAITING_WORK_TYPE)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ —Ä–∞–±–æ—Ç—ã:",
        reply_markup=get_work_types_kb()
    )
    await delete_previous_message(message.chat.id, message.message_id)

@dp.message(F.text == "üìä –ú–æ–∏ –æ—Ç—á–µ—Ç—ã")
async def cmd_my_reports(message: types.Message):
    report = generate_user_report(message.from_user.id)
    await message.answer(
        f"üìä <b>–í–∞—à–∏ –æ—Ç—á–µ—Ç—ã</b>\n\n{report}",
        parse_mode="HTML"
    )
    await delete_previous_message(message.chat.id, message.message_id)

@dp.message(F.text == "üë®‚Äçüíº –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ")
async def cmd_admin_panel(message: types.Message):
    if str(message.from_user.id) != os.getenv('ADMIN_ID'):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    await message.answer(
        "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
        reply_markup=get_admin_kb()
    )
    await delete_previous_message(message.chat.id, message.message_id)

@dp.message(F.text == "üìå –ü–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")
async def cmd_add_task(message: types.Message, state: FSMContext):
    if str(message.from_user.id) != os.getenv('ADMIN_ID'):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    await state.set_state(SurveyStates.ADMIN_ADD_TASK)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await delete_previous_message(message.chat.id, message.message_id)

@dp.message(F.text == "üìä –°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç")
async def cmd_full_report(message: types.Message):
    if str(message.from_user.id) != os.getenv('ADMIN_ID'):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    report = generate_admin_report()
    await message.answer(report, parse_mode="HTML")
    await delete_previous_message(message.chat.id, message.message_id)

@dp.message(F.text == "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
async def cmd_manage_users(message: types.Message, state: FSMContext):
    if str(message.from_user.id) != os.getenv('ADMIN_ID'):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    await state.set_state(SurveyStates.ADMIN_MANAGE_USERS)
    await message.answer(
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:",
        reply_markup=get_users_kb()
    )
    await delete_previous_message(message.chat.id, message.message_id)

@dp.message(F.text == "üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á")
async def cmd_tasks_list(message: types.Message):
    if str(message.from_user.id) != os.getenv('ADMIN_ID'):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    report = generate_tasks_report()
    await message.answer(report, parse_mode="HTML")
    await delete_previous_message(message.chat.id, message.message_id)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π ---
@dp.message(SurveyStates.WAITING_WORK_TYPE)
async def process_work_type(message: types.Message, state: FSMContext):
    if message.text not in WORK_TYPES:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ —Ä–∞–±–æ—Ç—ã –∏–∑ —Å–ø–∏—Å–∫–∞")
        return
    
    await state.update_data(work_type=message.text)
    await state.set_state(SurveyStates.WAITING_PROGRESS)
    await message.answer(
        "–£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:",
        reply_markup=get_progress_kb()
    )

@dp.message(SurveyStates.WAITING_PROGRESS)
async def process_progress(message: types.Message, state: FSMContext):
    try:
        progress = int(message.text.replace("%", ""))
        if not 0 <= progress <= 100:
            raise ValueError
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç 0 –¥–æ 100")
        return
    
    await state.update_data(progress=progress)
    await state.set_state(SurveyStates.WAITING_QUANTITY)
    await message.answer(
        "–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü:",
        reply_markup=get_quantity_kb()
    )

@dp.message(SurveyStates.WAITING_QUANTITY)
async def process_quantity(message: types.Message, state: FSMContext):
    try:
        if message.text == "–î—Ä—É–≥–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ":
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ä—É—á–Ω—É—é:", reply_markup=types.ReplyKeyboardRemove())
            return
        
        quantity = int(message.text)
        if quantity <= 0:
            raise ValueError
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")
        return
    
    data = await state.get_data()
    current_date = get_current_date()
    weekday = get_weekday()
    user_id = message.from_user.id
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    if user_id not in reports_db:
        reports_db[user_id] = {}
    
    if current_date not in reports_db[user_id]:
        reports_db[user_id][current_date] = []
    
    reports_db[user_id][current_date].append({
        "work_type": data["work_type"],
        "progress": data["progress"],
        "quantity": quantity,
        "weekday": weekday,
        "timestamp": datetime.now().isoformat()
    })
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É (–µ—Å–ª–∏ –µ—Å—Ç—å)
    for task_id, task in tasks_db.items():
        if data["work_type"] in task["works"]:
            task["works"][data["work_type"]]["assigned"] += quantity
    
    await state.clear()
    await message.answer(
        "‚úÖ <b>–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω</b>\n\n"
        f"üìÖ –î–µ–Ω—å: {weekday}, {current_date}\n"
        f"üîß –í–∏–¥ —Ä–∞–±–æ—Ç—ã: {data['work_type']}\n"
        f"üìä –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {data['progress']}%\n"
        f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity} —à—Ç",
        parse_mode="HTML",
        reply_markup=get_main_kb(user_id)
    )
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    admin_id = os.getenv('ADMIN_ID')
    if admin_id and str(user_id) != admin_id:
        try:
            name = user_names.get(user_id, f"ID:{user_id}")
            await bot.send_message(
                chat_id=int(admin_id),
                text=f"üìå –ù–æ–≤—ã–π –æ—Ç—á–µ—Ç –æ—Ç {name}\n\n"
                     f"üìÖ {weekday}, {current_date}\n"
                     f"üîß {data['work_type']}: {data['progress']}% ({quantity} —à—Ç)",
                parse_mode="HTML"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")

@dp.message(SurveyStates.ADMIN_ADD_TASK)
async def process_task_description(message: types.Message, state: FSMContext):
    task_id = len(tasks_db) + 1
    tasks_db[task_id] = {
        "description": message.text,
        "works": {},
        "created": datetime.now().isoformat()
    }
    
    await state.update_data(task_id=task_id)
    await state.set_state(SurveyStates.ADMIN_ADD_WORKERS)
    await message.answer(
        "–¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å—Ç–µ –≤–∏–¥—ã —Ä–∞–±–æ—Ç –¥–ª—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏.\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<b>–í–∏–¥ —Ä–∞–±–æ—Ç—ã: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ</b>\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
        "<code>–†–∞—Å–ø–∏–ª –¥–æ—Å–∫–∏: 10</code>\n\n"
        "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <b>–ì–æ—Ç–æ–≤–æ</b>",
        parse_mode="HTML"
    )

@dp.message(SurveyStates.ADMIN_ADD_WORKERS)
async def process_task_works(message: types.Message, state: FSMContext):
    if message.text.lower() == "–≥–æ—Ç–æ–≤–æ":
        data = await state.get_data()
        task_id = data["task_id"]
        await state.clear()
        await message.answer(
            f"‚úÖ –ó–∞–¥–∞—á–∞ #{task_id} —Å–æ–∑–¥–∞–Ω–∞!\n\n"
            f"{generate_tasks_report()}",
            parse_mode="HTML",
            reply_markup=get_admin_kb()
        )
        return
    
    try:
        work_type, quantity = message.text.split(":")
        work_type = work_type.strip()
        quantity = int(quantity.strip())
        
        if work_type not in WORK_TYPES:
            await message.answer(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤–∏–¥ —Ä–∞–±–æ—Ç—ã. –î–æ—Å—Ç—É–ø–Ω—ã–µ: {', '.join(WORK_TYPES)}")
            return
        
        data = await state.get_data()
        task_id = data["task_id"]
        
        if "works" not in tasks_db[task_id]:
            tasks_db[task_id]["works"] = {}
        
        tasks_db[task_id]["works"][work_type] = {
            "total": quantity,
            "assigned": 0
        }
        
        await message.answer(f"–î–æ–±–∞–≤–ª–µ–Ω–æ: {work_type} - {quantity} —à—Ç\n–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–ì–æ—Ç–æ–≤–æ'")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–±–æ—Ç—ã: {e}")
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: '–í–∏–¥ —Ä–∞–±–æ—Ç—ã: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ'")

@dp.callback_query(F.data.startswith("toggle_user_"))
async def toggle_user(callback: types.CallbackQuery, state: FSMContext):
    user_id = int(callback.data.split("_")[2])
    if user_id in allowed_users:
        allowed_users.remove(user_id)
    else:
        allowed_users.add(user_id)
    
    await callback.message.edit_reply_markup(reply_markup=get_users_kb())
    await callback.answer()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    admin_id = os.getenv('ADMIN_ID')
    if admin_id:
        allowed_users.add(int(admin_id))
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ (—Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π)
    for user_id, user_data in reports_db.items():
        for date in list(user_data.keys()):
            report_date = datetime.strptime(date, "%d.%m.%Y")
            if datetime.now() - report_date > timedelta(days=30):
                del user_data[date]
    
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
