import os
import logging
from datetime import datetime
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=os.getenv('BOT_TOKEN'))
dp = Dispatcher()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ–ø—Ä–æ—Å–∞
class SurveyStates(StatesGroup):
    WAITING_TASK = State()
    WAITING_WORK_TYPE = State()
    WAITING_PROGRESS = State()

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤
reports_db = {}
# –•—Ä–∞–Ω–∏–ª–∏—â–µ ID —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
user_message_history = {}

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
async def safe_delete_messages(chat_id: int, message_ids: list):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    for msg_id in message_ids:
        try:
            await bot.delete_message(chat_id=chat_id, message_id=msg_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è {msg_id}: {e}")

async def update_message_history(user_id: int, new_msg: types.Message):
    """–û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id not in user_message_history:
        user_message_history[user_id] = []
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if len(user_message_history[user_id]) > 3:  # –•—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å–æ–æ–±—â–µ–Ω–∏—è
        old_msg_id = user_message_history[user_id].pop(0)
        try:
            await bot.delete_message(chat_id=new_msg.chat.id, message_id=old_msg_id)
        except:
            pass
    
    user_message_history[user_id].append(new_msg.message_id)

def get_current_weekday():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏"""
    days = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
    return days[datetime.now().weekday()]

def generate_report(user_id: int) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    if user_id not in reports_db or not reports_db[user_id]:
        return "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤"
    
    report = ["üìä <b>–í–∞—à–∏ –æ—Ç—á–µ—Ç—ã</b>\n"]
    for date, records in reports_db[user_id].items():
        report.append(f"\nüìÖ <b>{date}</b>")
        for record in records:
            report.append(
                f"  ‚Ä¢ {record['work_type']}: {record['progress']}%"
                f"\n  üìù –ó–∞–¥–∞—á–∞: {record['task']}\n"
            )
    
    return "\n".join(report)

def generate_admin_report():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if not reports_db:
        return "üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é —Ä–∞–±–æ—Ç"
    
    report = ["üìà <b>–°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –∫–æ–º–∞–Ω–¥–µ</b>\n"]
    for user_id, user_data in reports_db.items():
        report.append(f"\nüë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {user_id}</b>")
        for date, records in user_data.items():
            report.append(f"\n  üìÖ {date}")
            for record in records:
                report.append(f"    ‚Ä¢ {record['work_type']}: {record['progress']}%")
    
    return "\n".join(report)

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def get_main_menu_kb():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏"""
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="üìù –ù–æ–≤—ã–π –æ—Ç—á–µ—Ç",
        callback_data="new_report"
    ))
    builder.add(types.InlineKeyboardButton(
        text="üìä –ú–æ–∏ –æ—Ç—á–µ—Ç—ã",
        callback_data="my_reports"
    ))
    builder.add(types.InlineKeyboardButton(
        text="üÜò –ü–æ–º–æ—â—å",
        callback_data="help"
    ))
    builder.adjust(1)
    return builder.as_markup()

def get_work_types_kb():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Ç–∏–ø–∞–º–∏ —Ä–∞–±–æ—Ç"""
    builder = ReplyKeyboardBuilder()
    builder.add(types.KeyboardButton(text="–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞"))
    builder.add(types.KeyboardButton(text="–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"))
    builder.add(types.KeyboardButton(text="–î–∏–∑–∞–π–Ω"))
    builder.add(types.KeyboardButton(text="–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è"))
    builder.add(types.KeyboardButton(text="–î—Ä—É–≥–æ–µ"))
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)

def get_progress_kb():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
    builder = ReplyKeyboardBuilder()
    for i in range(0, 101, 10):
        builder.add(types.KeyboardButton(text=f"{i}%"))
    builder.adjust(5)
    return builder.as_markup(resize_keyboard=True)

def get_back_to_menu_kb():
    """–ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é"""
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        callback_data="main_menu"
    ))
    return builder.as_markup()

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    msg = await message.answer(
        "üìã <b>–°–∏—Å—Ç–µ–º–∞ —É—á–µ—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞–±–æ—Ç</b>\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞–º–∏:",
        parse_mode="HTML",
        reply_markup=get_main_menu_kb()
    )
    await update_message_history(message.from_user.id, msg)

@dp.callback_query(F.data == "main_menu")
async def back_to_menu(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(
        "üìã <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode="HTML",
        reply_markup=get_main_menu_kb()
    )
    await callback.answer()

@dp.callback_query(F.data == "new_report")
async def start_new_report(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(SurveyStates.WAITING_TASK)
    msg = await callback.message.edit_text(
        "üìù <b>–ù–æ–≤—ã–π –æ—Ç—á–µ—Ç</b>\n\n"
        "–û–ø–∏—à–∏—Ç–µ –æ–±—â—É—é –∑–∞–¥–∞—á—É, –Ω–∞–¥ –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ:",
        parse_mode="HTML",
        reply_markup=get_back_to_menu_kb()
    )
    await update_message_history(callback.from_user.id, msg)
    await callback.answer()

@dp.callback_query(F.data == "my_reports")
async def show_my_reports(callback: types.CallbackQuery):
    report = generate_report(callback.from_user.id)
    msg = await callback.message.edit_text(
        report,
        parse_mode="HTML",
        reply_markup=get_back_to_menu_kb()
    )
    await update_message_history(callback.from_user.id, msg)
    await callback.answer()

@dp.callback_query(F.data == "help")
async def show_help(callback: types.CallbackQuery):
    help_text = (
        "‚ÑπÔ∏è <b>–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É</b>\n\n"
        "<b>–ö–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–æ—Ç–æ–º:</b>\n"
        "1. –ù–∞–∂–º–∏—Ç–µ <b>–ù–æ–≤—ã–π –æ—Ç—á–µ—Ç</b> –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞\n"
        "2. –£–∫–∞–∂–∏—Ç–µ –∑–∞–¥–∞—á—É, –≤–∏–¥ —Ä–∞–±–æ—Ç—ã –∏ –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è\n"
        "3. –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ —Å–≤–æ–∏ –æ—Ç—á–µ—Ç—ã –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è\n\n"
        "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ"
    )
    msg = await callback.message.edit_text(
        help_text,
        parse_mode="HTML",
        reply_markup=get_back_to_menu_kb()
    )
    await update_message_history(callback.from_user.id, msg)
    await callback.answer()

@dp.message(Command("cancel"))
async def cmd_cancel(message: types.Message, state: FSMContext):
    await state.clear()
    msg = await message.answer(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=get_main_menu_kb()
    )
    await update_message_history(message.from_user.id, msg)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π ---
@dp.message(SurveyStates.WAITING_TASK)
async def process_task(message: types.Message, state: FSMContext):
    await state.update_data(task=message.text)
    await state.set_state(SurveyStates.WAITING_WORK_TYPE)
    msg = await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ —Ä–∞–±–æ—Ç—ã:",
        reply_markup=get_work_types_kb()
    )
    await update_message_history(message.from_user.id, msg)

@dp.message(SurveyStates.WAITING_WORK_TYPE)
async def process_work_type(message: types.Message, state: FSMContext):
    await state.update_data(work_type=message.text)
    await state.set_state(SurveyStates.WAITING_PROGRESS)
    msg = await message.answer(
        "–£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:",
        reply_markup=get_progress_kb()
    )
    await update_message_history(message.from_user.id, msg)

@dp.message(SurveyStates.WAITING_PROGRESS)
async def process_progress(message: types.Message, state: FSMContext):
    try:
        progress = int(message.text.replace("%", ""))
        if not 0 <= progress <= 100:
            raise ValueError
    except ValueError:
        msg = await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç 0 –¥–æ 100",
            reply_markup=get_progress_kb()
        )
        await update_message_history(message.from_user.id, msg)
        return
    
    data = await state.get_data()
    current_date = datetime.now().strftime("%d.%m.%Y")
    weekday = get_current_weekday()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    user_id = message.from_user.id
    if user_id not in reports_db:
        reports_db[user_id] = {}
    
    if current_date not in reports_db[user_id]:
        reports_db[user_id][current_date] = []
    
    reports_db[user_id][current_date].append({
        "task": data["task"],
        "work_type": data["work_type"],
        "progress": progress,
        "weekday": weekday
    })
    
    await state.clear()
    report_msg = (
        "‚úÖ <b>–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω</b>\n\n"
        f"üìÖ –î–µ–Ω—å: {weekday}, {current_date}\n"
        f"üìå –ó–∞–¥–∞—á–∞: {data['task']}\n"
        f"üîß –í–∏–¥ —Ä–∞–±–æ—Ç—ã: {data['work_type']}\n"
        f"üìä –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {progress}%"
    )
    
    msg = await message.answer(
        report_msg,
        parse_mode="HTML",
        reply_markup=get_main_menu_kb()
    )
    await update_message_history(message.from_user.id, msg)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    admin_id = os.getenv('ADMIN_ID')
    if admin_id:
        try:
            await bot.send_message(
                chat_id=int(admin_id),
                text=f"üìå –ù–æ–≤—ã–π –æ—Ç—á–µ—Ç –æ—Ç @{message.from_user.username}\n\n{report_msg}",
                parse_mode="HTML"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É: {e}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
