import os
import logging
from datetime import datetime
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=os.getenv('BOT_TOKEN'))
dp = Dispatcher()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ–ø—Ä–æ—Å–∞
class SurveyStates(StatesGroup):
    WAITING_TASK = State()
    WAITING_WORK_TYPE = State()
    WAITING_PROGRESS = State()
    WAITING_QUANTITY = State()

class AdminStates(StatesGroup):
    WAITING_TASK_ASSIGNMENT = State()
    WAITING_WORKER_SELECTION = State()
    WAITING_USER_MANAGEMENT = State()

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
reports_db = {}
tasks_db = {}
allowed_users = set()
admin_users = {int(os.getenv('ADMIN_ID'))} if os.getenv('ADMIN_ID') else set()

# –í–∏–¥—ã —Ä–∞–±–æ—Ç
WORK_TYPES = [
    "–†–∞—Å–ø–∏–ª –¥–æ—Å–∫–∏", "–§—É–≥–æ–≤–∞–Ω–∏–µ", "–†–µ–π—Å–º—É—Å–æ–≤–∞–Ω–∏–µ", "–†–∞—Å–ø–∏–ª –Ω–∞ –¥–µ—Ç–∞–ª–∏",
    "–û—Ç–≤–µ—Ä—Å—Ç–∏—è –≤ –ø–ª–∞—Å—Ç—å", "–ü—Ä–∏—Å–∞–¥–∫–∞ –æ—Ç–≤–µ—Ä—Å—Ç–∏–π", "–§—Ä–µ–∑–µ—Ä–æ–≤–∫–∞ –ø–∞–∑–æ–≤",
    "–§—Ä–µ–∑–µ—Ä–æ–≤–∫–∞ —É–≥–ª–æ–≤", "–®–ª–∏—Ñ–æ–≤–∫–∞", "–ü–æ–¥—Ä–µ–∑", "–°–±–æ—Ä–∫–∞", "–î–æ—à–ª–∏—Ñ–æ–≤–∫–∞",
    "–ü–æ–∫—Ä–∞—Å–∫–∞ –∫–∞—Ä–∫–∞—Å–æ–≤", "–ü–æ–∫—Ä–∞—Å–∫–∞ –Ω–æ–∂–µ–∫", "–ü–æ–∫—Ä–∞—Å–∫–∞ —Ä—É—á–µ–∫",
    "–†–µ–∑ –Ω–∞ –∫–æ—Ä–æ–±–∫–∏", "–°–±–æ—Ä–∫–∞ –∫–æ—Ä–æ–±–æ–∫", "–£–ø–∞–∫–æ–≤–∫–∞", 
    "–§—Ä–µ–∑–µ—Ä–æ–≤–∫–∞ –ø–∞–∑–æ–≤ —Ä—É—á–µ–∫", "–†–∞—Å–ø–∏–ª –Ω–∞ —Ä—É—á–∫–∏"
]

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def get_user_main_kb():
    builder = ReplyKeyboardBuilder()
    builder.add(types.KeyboardButton(text="üìù –ù–æ–≤—ã–π –æ—Ç—á–µ—Ç"))
    builder.add(types.KeyboardButton(text="üìä –ú–æ–∏ –æ—Ç—á–µ—Ç—ã"))
    builder.add(types.KeyboardButton(text="üìå –ú–æ–∏ –∑–∞–¥–∞—á–∏"))
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)

def get_admin_main_kb():
    builder = ReplyKeyboardBuilder()
    builder.add(types.KeyboardButton(text="üìù –ù–æ–≤—ã–π –æ—Ç—á–µ—Ç"))
    builder.add(types.KeyboardButton(text="üìä –ú–æ–∏ –æ—Ç—á–µ—Ç—ã"))
    builder.add(types.KeyboardButton(text="üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"))
    builder.add(types.KeyboardButton(text="üìå –ù–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–¥–∞—á—É"))
    builder.add(types.KeyboardButton(text="üìà –°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç"))
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)

def get_work_types_kb():
    builder = ReplyKeyboardBuilder()
    for work_type in WORK_TYPES:
        builder.add(types.KeyboardButton(text=work_type))
    builder.adjust(3)
    return builder.as_markup(resize_keyboard=True)

def get_progress_kb():
    builder = ReplyKeyboardBuilder()
    for i in range(0, 101, 10):
        builder.add(types.KeyboardButton(text=f"{i}%"))
    builder.adjust(5)
    return builder.as_markup(resize_keyboard=True)

def get_quantity_kb():
    builder = ReplyKeyboardBuilder()
    for i in [1, 5, 10, 20, 50, 100]:
        builder.add(types.KeyboardButton(text=str(i)))
    builder.add(types.KeyboardButton(text="‚úèÔ∏è –î—Ä—É–≥–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ"))
    builder.add(types.KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞"))
    builder.adjust(3)
    return builder.as_markup(resize_keyboard=True)

def get_user_management_kb():
    builder = ReplyKeyboardBuilder()
    builder.add(types.KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"))
    builder.add(types.KeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"))
    builder.add(types.KeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"))
    builder.add(types.KeyboardButton(text="üîô –ù–∞–∑–∞–¥"))
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)

def get_cancel_kb():
    builder = ReplyKeyboardBuilder()
    builder.add(types.KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞"))
    return builder.as_markup(resize_keyboard=True)

# --- –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if user_id not in {u[0] for u in allowed_users} and user_id not in admin_users:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É")
        return
    
    await state.clear()
    if user_id in admin_users:
        await message.answer(
            "üõ† <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –≤—Å–µ –æ—Ç—á–µ—Ç—ã",
            reply_markup=get_admin_main_kb(),
            parse_mode="HTML"
        )
    else:
        await message.answer(
            "üè≠ <b>–°–∏—Å—Ç–µ–º–∞ —É—á–µ—Ç–∞ —Å—Ç–æ–ª—è—Ä–Ω—ã—Ö —Ä–∞–±–æ—Ç</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–∏—Å—Ç–µ–º–æ–π",
            reply_markup=get_user_main_kb(),
            parse_mode="HTML"
        )

@dp.message(F.text == "üîô –ù–∞–∑–∞–¥", F.from_user.id.in_(admin_users))
async def admin_back(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "üõ† <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>",
        reply_markup=get_admin_main_kb(),
        parse_mode="HTML"
    )

@dp.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞"))
async def cancel_action(message: types.Message, state: FSMContext):
    await state.clear()
    user_id = message.from_user.id
    if user_id in admin_users:
        await message.answer(
            "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=get_admin_main_kb()
        )
    else:
        await message.answer(
            "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=get_user_main_kb()
        )

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
@dp.message(F.text == "üìù –ù–æ–≤—ã–π –æ—Ç—á–µ—Ç"))
async def new_report_start(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if user_id not in {u[0] for u in allowed_users}:
        return
    
    await state.set_state(SurveyStates.WAITING_TASK)
    await message.answer(
        "üìù –í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á—É, –Ω–∞–¥ –∫–æ—Ç–æ—Ä–æ–π —Ä–∞–±–æ—Ç–∞–ª–∏:",
        reply_markup=get_cancel_kb()
    )

@dp.message(SurveyStates.WAITING_TASK)
async def process_task(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await cancel_action(message, state)
        return
    
    await state.update_data(task=message.text)
    await state.set_state(SurveyStates.WAITING_WORK_TYPE)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ —Ä–∞–±–æ—Ç—ã:",
        reply_markup=get_work_types_kb()
    )

@dp.message(F.text == "üìä –ú–æ–∏ –æ—Ç—á–µ—Ç—ã"))
async def show_my_reports(message: types.Message):
    user_id = message.from_user.id
    username = next((u[1] for u in allowed_users if u[0] == user_id), "Unknown")
    report = generate_user_report(user_id, username)
    await message.answer(report, parse_mode="HTML")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ---
@dp.message(F.text == "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", F.from_user.id.in_(admin_users))
async def manage_users(message: types.Message):
    await message.answer(
        "üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</b>",
        reply_markup=get_user_management_kb(),
        parse_mode="HTML"
    )

@dp.message(F.text == "üìå –ù–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–¥–∞—á—É", F.from_user.id.in_(admin_users))
async def assign_task(message: types.Message, state: FSMContext):
    await state.set_state(AdminStates.WAITING_TASK_ASSIGNMENT)
    await message.answer(
        "üìù –í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:",
        reply_markup=get_cancel_kb()
    )

@dp.message(F.text == "üìà –°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç", F.from_user.id.in_(admin_users))
async def full_report(message: types.Message):
    report = generate_admin_report()
    await message.answer(report, parse_mode="HTML")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
