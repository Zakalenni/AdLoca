import os
import logging
import asyncio
from html import escape
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=os.getenv('BOT_TOKEN'))
dp = Dispatcher()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
class OrderStates(StatesGroup):
    WAITING_FOR_ADDRESS = State()
    WAITING_FOR_PHONE = State()

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
products = {
    1: {
        "id": 1,
        "name": "–≠—Ç–∞–∂–µ—Ä–∫–∞, 4 —Å–µ–∫—Ü–∏–∏",
        "price": 300000,  # –≤ –∫–æ–ø–µ–π–∫–∞—Ö –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏
        "description": "–≠—Ç–∞–∂–µ—Ä–∫–∞ –¥–ª—è –≤–∞–Ω–Ω–æ–π –∏ –∫—É—Ö–Ω–∏ –¥–µ—Ä–µ–≤—è–Ω–Ω–∞—è. –ò–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ª—é–±–æ–º —É–≥–æ–ª–∫–µ –≤–∞—à–µ–≥–æ –¥–æ–º–∞ ‚Äî –±—É–¥—å —Ç–æ –≤–∞–Ω–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞ –∏–ª–∏ –∫—É—Ö–Ω—è. –°—Ç–µ–ª–ª–∞–∂ –∏–º–µ–µ—Ç —á–µ—Ç—ã—Ä–µ —Å—ä–µ–º–Ω—ã—Ö —è—â–∏–∫–∞-–∫–æ—Ä–∑–∏–Ω—ã, —á—Ç–æ –¥–µ–ª–∞–µ—Ç –µ–≥–æ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–º –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤. –î–µ—Ä–µ–≤—è–Ω–Ω–∞—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø—Ä–∏–¥–∞—ë—Ç –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥. –ü–æ–ª–∫–∞ —Ç–∞–∫–æ–≥–æ —Ç–∏–ø–∞ –Ω–µ —Ç–æ–ª—å–∫–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞, –Ω–æ –∏ —ç—Å—Ç–µ—Ç–∏—á–Ω–∞, —á—Ç–æ –¥–µ–ª–∞–µ—Ç –µ—ë –æ—Ç–ª–∏—á–Ω—ã–º —Ä–µ—à–µ–Ω–∏–µ–º –¥–ª—è –ª—é–±–æ–≥–æ —Å—Ç–∏–ª—è (–ª–æ—Ñ—Ç, —Å–∫–∞–Ω–¥–∏–Ω–∞–≤—Å–∫–∏–π, —ç–∫–æ-—Å—Ç–∏–ª—å, —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π, –º–∏–Ω–∏–º–∞–ª–∏–∑–º). –£–∑–∫–∞—è –Ω–∞–ø–æ–ª—å–Ω–∞—è —ç—Ç–∞–∂–µ—Ä–∫–∞ –º–æ–∂–Ω–æ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –≤ –º–∞–ª–µ–Ω—å–∫–æ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ –±–µ–∑ –ø–æ—Ç–µ—Ä–∏ –º–µ—Å—Ç–∞, –∞ –ª–µ–≥–∫–∏–π –≤–µ—Å –ø–æ–∑–≤–æ–ª—è–µ—Ç –±–µ–∑ —Ç—Ä—É–¥–∞ –ø–µ—Ä–µ–º–µ—â–∞—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏. –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è: –í –≤–∞–Ω–Ω–æ–π –∫–æ–º–Ω–∞—Ç–µ ‚Äî –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —É—Ö–æ–¥–æ–≤–æ–π –∫–æ—Å–º–µ—Ç–∏–∫–∏, –ø–æ–ª–æ—Ç–µ–Ω–µ—Ü –∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–µ–π –¥–ª—è –≤–∞–Ω–Ω—ã –∏ —Ç—É–∞–ª–µ—Ç–∞. –ù–∞ –∫—É—Ö–Ω–µ ‚Äî –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ—Ä—É–∫—Ç–æ–≤, –æ–≤–æ—â–µ–π, –∫–æ—Ä–º–∞ –¥–ª—è –∂–∏–≤–æ—Ç–Ω—ã—Ö –∏ –∫—É—Ö–æ–Ω–Ω—ã—Ö –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–µ–π. –ê –µ—â–µ —ç—Ç–æ –æ—Ç–ª–∏—á–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫ –Ω–∞ –Ω–æ–≤–æ—Å–µ–ª—å–µ!",
        "category": "–≠—Ç–∞–∂–µ—Ä–∫–∏",
        "images": [
            "https://ir-8.ozone.ru/s3/multimedia-1-h/wc1000/7497020069.jpg",
            "https://ir-8.ozone.ru/s3/multimedia-1-k/wc1000/7483462508.jpg",
            "https://ir-8.ozone.ru/s3/multimedia-1-b/wc1000/7483462499.jpg"
        ],
        "colors": ["–±–µ–ª—ã–µ", "—á–µ—Ä–Ω—ã–µ"]
    },
    2: {
        "id": 2,
        "name": "–≠—Ç–∞–∂–µ—Ä–∫–∞, 3 —Å–µ–∫—Ü–∏–∏",
        "price": 250000,
        "description": "–ö–æ–º–ø–∞–∫—Ç–Ω–∞—è —ç—Ç–∞–∂–µ—Ä–∫–∞ –¥–ª—è –≤–∞–Ω–Ω–æ–π –∏ –∫—É—Ö–Ω–∏ –¥–µ—Ä–µ–≤—è–Ω–Ω–∞—è. –ò–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ª—é–±–æ–º —É–≥–æ–ª–∫–µ –≤–∞—à–µ–≥–æ –¥–æ–º–∞ ‚Äî –±—É–¥—å —Ç–æ –≤–∞–Ω–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞ –∏–ª–∏ –∫—É—Ö–Ω—è. –°—Ç–µ–ª–ª–∞–∂ –∏–º–µ–µ—Ç —á–µ—Ç—ã—Ä–µ —Å—ä–µ–º–Ω—ã—Ö —è—â–∏–∫–∞-–∫–æ—Ä–∑–∏–Ω—ã, —á—Ç–æ –¥–µ–ª–∞–µ—Ç –µ–≥–æ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–º –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤. –î–µ—Ä–µ–≤—è–Ω–Ω–∞—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø—Ä–∏–¥–∞—ë—Ç –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥. –ü–æ–ª–∫–∞ —Ç–∞–∫–æ–≥–æ —Ç–∏–ø–∞ –Ω–µ —Ç–æ–ª—å–∫–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞, –Ω–æ –∏ —ç—Å—Ç–µ—Ç–∏—á–Ω–∞, —á—Ç–æ –¥–µ–ª–∞–µ—Ç –µ—ë –æ—Ç–ª–∏—á–Ω—ã–º —Ä–µ—à–µ–Ω–∏–µ–º –¥–ª—è –ª—é–±–æ–≥–æ —Å—Ç–∏–ª—è (–ª–æ—Ñ—Ç, —Å–∫–∞–Ω–¥–∏–Ω–∞–≤—Å–∫–∏–π, —ç–∫–æ-—Å—Ç–∏–ª—å, —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π, –º–∏–Ω–∏–º–∞–ª–∏–∑–º). –£–∑–∫–∞—è –Ω–∞–ø–æ–ª—å–Ω–∞—è —ç—Ç–∞–∂–µ—Ä–∫–∞ –º–æ–∂–Ω–æ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –≤ –º–∞–ª–µ–Ω—å–∫–æ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ –±–µ–∑ –ø–æ—Ç–µ—Ä–∏ –º–µ—Å—Ç–∞, –∞ –ª–µ–≥–∫–∏–π –≤–µ—Å –ø–æ–∑–≤–æ–ª—è–µ—Ç –±–µ–∑ —Ç—Ä—É–¥–∞ –ø–µ—Ä–µ–º–µ—â–∞—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏. –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è: –í –≤–∞–Ω–Ω–æ–π –∫–æ–º–Ω–∞—Ç–µ ‚Äî –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —É—Ö–æ–¥–æ–≤–æ–π –∫–æ—Å–º–µ—Ç–∏–∫–∏, –ø–æ–ª–æ—Ç–µ–Ω–µ—Ü –∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–µ–π –¥–ª—è –≤–∞–Ω–Ω—ã –∏ —Ç—É–∞–ª–µ—Ç–∞. –ù–∞ –∫—É—Ö–Ω–µ ‚Äî –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ—Ä—É–∫—Ç–æ–≤, –æ–≤–æ—â–µ–π, –∫–æ—Ä–º–∞ –¥–ª—è –∂–∏–≤–æ—Ç–Ω—ã—Ö –∏ –∫—É—Ö–æ–Ω–Ω—ã—Ö –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–µ–π. –ê –µ—â–µ —ç—Ç–æ –æ—Ç–ª–∏—á–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫ –Ω–∞ –Ω–æ–≤–æ—Å–µ–ª—å–µ!",
        "category": "–≠—Ç–∞–∂–µ—Ä–∫–∏",
        "images": [
            "https://ir-8.ozone.ru/s3/multimedia-1-a/wc1000/7497018550.jpg",
            "https://ir-8.ozone.ru/s3/multimedia-1-9/wc1000/7483485033.jpg",
            "https://ir-8.ozone.ru/s3/multimedia-1-b/wc1000/7483462499.jpg"
        ],
        "colors": ["–±–µ–ª—ã–µ", "—á–µ—Ä–Ω—ã–µ"]
    }
}

# –ö–æ—Ä–∑–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id: {product_id: {"quantity": int, "color": str}}}
user_carts = {}

async def delete_previous_message(message: types.Message):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        await message.delete()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

async def send_product_card(chat_id: int, product: dict, image_index=0):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º"""
    try:
        await bot.send_photo(
            chat_id=chat_id,
            photo=product["images"][image_index],
            caption=(
                f"üõãÔ∏è <b>{escape(product['name'])}</b>\n\n"
                f"üì∏ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {image_index+1} –∏–∑ {len(product['images'])}\n\n"
                f"üíµ –¶–µ–Ω–∞: {product['price']//100}‚ÇΩ\n"
                f"üé® –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–≤–µ—Ç–∞ –∫–æ—Ä–∑–∏–Ω: {', '.join(escape(c) for c in product['colors'])}\n\n"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ:\n{escape(product['description'])}"
            ),
            reply_markup=product_kb(product["id"], image_index),
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞: {e}")
        raise

def generate_order_text(user: types.User, phone: str, address: str, cart_items: dict) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    order_lines = []
    total = 0
    
    for product_id, item in cart_items.items():
        product = products[product_id]
        price = product["price"] * item["quantity"]
        total += price
        line = f"- {escape(product['name'])}"
        if item.get("color"):
            line += f" (—Ü–≤–µ—Ç: {escape(item['color'])})"
        line += f" - {item['quantity']} √ó {product['price']//100}‚ÇΩ = {price//100}‚ÇΩ"
        order_lines.append(line)
    
    text = (
        "üõé <b>–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞</b>\n\n"
        f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {escape(user.full_name)}\n"
        f"üÜî <b>ID:</b> {user.id}\n"
    )
    
    if user.username:
        text += f"üì± <b>Username:</b> @{escape(user.username)}\n"
    
    text += (
        f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {escape(phone)}\n"
        f"üè† <b>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {escape(address)}\n\n"
        "<b>–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:</b>\n"
        f"{chr(10).join(order_lines)}\n\n"
        f"üíµ <b>–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ:</b> {total//100}‚ÇΩ"
    )
    
    return text

def generate_admin_order_text(user: types.User, phone: str, address: str, cart_items: dict) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    order_lines = []
    total = 0
    
    for product_id, item in cart_items.items():
        product = products[product_id]
        price = product["price"] * item["quantity"]
        total += price
        line = f"- {escape(product['name'])}"
        if item.get("color"):
            line += f" (—Ü–≤–µ—Ç: {escape(item['color'])})"
        line += f" - {item['quantity']} √ó {product['price']//100}‚ÇΩ = {price//100}‚ÇΩ"
        order_lines.append(line)
    
    text = (
        "üõé <b>–ù–û–í–´–ô –ó–ê–ö–ê–ó!</b>\n\n"
        f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {escape(user.full_name)}\n"
        f"üÜî <b>ID:</b> {user.id}\n"
    )
    
    if user.username:
        text += f"üì± <b>Username:</b> @{escape(user.username)}\n"
    
    text += (
        f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {escape(phone)}\n"
        f"üè† <b>–ê–¥—Ä–µ—Å:</b> {escape(address)}\n\n"
        "<b>–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:</b>\n"
        f"{chr(10).join(order_lines)}\n\n"
        f"üíµ <b>–ò—Ç–æ–≥–æ:</b> {total//100}‚ÇΩ"
    )
    
    return text

def admin_order_kb(user_id: int, phone: str) -> types.InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –∑–∞–∫–∞–∑–æ–º"""
    builder = InlineKeyboardBuilder()
    
    # –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
    builder.add(types.InlineKeyboardButton(
        text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑",
        callback_data=f"admin_confirm_{user_id}"
    ))
    
    # –ö–Ω–æ–ø–∫–∞ –∑–≤–æ–Ω–∫–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å +)
    if phone.startswith('+'):
        builder.add(types.InlineKeyboardButton(
            text=f"üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å ({phone})",
            callback_data=f"admin_call_{user_id}"
        ))
    
    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É
    builder.add(types.InlineKeyboardButton(
        text="üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—É",
        url=f"tg://user?id={user_id}"
    ))
    
    builder.adjust(1)
    return builder.as_markup()

def main_menu_kb():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="üõãÔ∏è –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤",
        callback_data="catalog"
    ))
    builder.add(types.InlineKeyboardButton(
        text="üõí –ú–æ—è –∫–æ—Ä–∑–∏–Ω–∞", 
        callback_data="cart"
    ))
    builder.add(types.InlineKeyboardButton(
        text="üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã –º–∞–≥–∞–∑–∏–Ω–∞",
        callback_data="contacts"
    ))
    builder.adjust(1)
    return builder.as_markup()

def categories_kb():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ —Ç–æ–≤–∞—Ä–æ–≤"""
    categories = sorted(set(product["category"] for product in products.values()))
    builder = InlineKeyboardBuilder()
    for category in categories:
        builder.add(types.InlineKeyboardButton(
            text=category,
            callback_data=f"category_{category}"
        ))
    builder.add(types.InlineKeyboardButton(
        text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        callback_data="main_menu"
    ))
    builder.adjust(1)
    return builder.as_markup()

def products_kb(category: str):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    builder = InlineKeyboardBuilder()
    for product_id, product in products.items():
        if product["category"] == category:
            builder.add(types.InlineKeyboardButton(
                text=f"{product['name']} - {product['price']//100}‚ÇΩ",
                callback_data=f"product_{product_id}"
            ))
    builder.add(types.InlineKeyboardButton(
        text="üîô –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
        callback_data="catalog"
    ))
    builder.adjust(1)
    return builder.as_markup()

def product_kb(product_id: int, image_index=0):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞"""
    try:
        product = products[product_id]
        builder = InlineKeyboardBuilder()
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
        if len(product["images"]) > 1:
            builder.add(types.InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Ñ–æ—Ç–æ",
                callback_data=f"nav_img_{product_id}_{image_index}_prev"
            ))
            builder.add(types.InlineKeyboardButton(
                text=f"{image_index+1}/{len(product['images'])}",
                callback_data="no_action"
            ))
            builder.add(types.InlineKeyboardButton(
                text="–°–ª–µ–¥—É—é—â–µ–µ —Ñ–æ—Ç–æ ‚û°Ô∏è",
                callback_data=f"nav_img_{product_id}_{image_index}_next"
            ))
        
        # –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–∞
        for color in product["colors"]:
            builder.add(types.InlineKeyboardButton(
                text=f"üé® {color.capitalize()}",
                callback_data=f"color_{product_id}_{color}"
            ))
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        builder.add(types.InlineKeyboardButton(
            text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É",
            callback_data=f"add_{product_id}"
        ))
        builder.add(types.InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥ –∫ —Ç–æ–≤–∞—Ä–∞–º",
            callback_data=f"category_{product['category']}"
        ))
        
        # –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
        if len(product["images"]) > 1:
            builder.adjust(3, *[2 for _ in product["colors"]], 1)
        else:
            builder.adjust(*[2 for _ in product["colors"]], 1)
        
        return builder.as_markup()
    except KeyError:
        return None

def cart_kb(cart_items: dict):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∫–æ—Ä–∑–∏–Ω—ã"""
    builder = InlineKeyboardBuilder()
    
    if cart_items:
        builder.add(types.InlineKeyboardButton(
            text="üöÄ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑",
            callback_data="checkout"
        ))
        builder.add(types.InlineKeyboardButton(
            text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É",
            callback_data="clear_cart"
        ))
    
    builder.add(types.InlineKeyboardButton(
        text="üõãÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏",
        callback_data="catalog"
    ))
    builder.add(types.InlineKeyboardButton(
        text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        callback_data="main_menu"
    ))
    
    builder.adjust(1)
    return builder.as_markup()

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await message.answer_photo(
        photo="https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Fpriroda.club%2Fuploads%2Fposts%2F2022-08%2F1660129024_1-priroda-club-p-krasivie-doma-na-prirode-krasivo-foto-1.jpg&f=1&nofb=1&ipt=b0676001edfb48dde41f75ef58a27c7a4d238afcd0ef1ed482f147d0591cc26e",
        caption=(
            "üè† –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–±–µ–ª—å–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω 'Ad Loca'!\n\n"
            "–ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—É—é –º–µ–±–µ–ª—å —Ä—É—á–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∏–∑ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:"
        ),
        reply_markup=main_menu_kb()
    )

@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    await message.answer(
        "‚ÑπÔ∏è <b>–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É</b>\n\n"
        "<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
        "/cart - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ—Ä–∑–∏–Ω—É\n\n"
        "<b>–ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑:</b>\n"
        "1. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –≤ –∫–∞—Ç–∞–ª–æ–≥–µ\n"
        "2. –î–æ–±–∞–≤—å—Ç–µ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –∫–æ—Ä–∑–∏–Ω—É\n"
        "3. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∫–æ—Ä–∑–∏–Ω—É –∏ –æ—Ñ–æ—Ä–º–∏—Ç–µ –∑–∞–∫–∞–∑\n"
        "4. –£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω\n\n"
        "<b>–í–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã?</b> –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª '–ö–æ–Ω—Ç–∞–∫—Ç—ã'",
        parse_mode="HTML"
    )

@dp.callback_query(F.data == "main_menu")
async def main_menu(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await delete_previous_message(callback.message)
    await callback.message.answer(
        "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:",
        reply_markup=main_menu_kb(),
        parse_mode="HTML"
    )
    await callback.answer()

@dp.callback_query(F.data == "catalog")
async def show_catalog(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫–∞–∑–∞ –∫–∞—Ç–∞–ª–æ–≥–∞"""
    await delete_previous_message(callback.message)
    await callback.message.answer(
        "üõãÔ∏è <b>–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=categories_kb(),
        parse_mode="HTML"
    )
    await callback.answer()

@dp.callback_query(F.data.startswith("category_"))
async def show_category_products(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫–∞–∑–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    await delete_previous_message(callback.message)
    category = callback.data.split("_")[1]
    await callback.message.answer(
        f"üì¶ <b>–¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}'</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        reply_markup=products_kb(category),
        parse_mode="HTML"
    )
    await callback.answer()

@dp.callback_query(F.data.startswith("product_"))
async def show_product(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫–∞–∑–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞"""
    try:
        await delete_previous_message(callback.message)
        product_id = int(callback.data.split("_")[1])
        product = products[product_id]
        await send_product_card(callback.message.chat.id, product)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Ç–æ–≤–∞—Ä–∞: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–≤–∞—Ä–∞", show_alert=True)
    finally:
        await callback.answer()

@dp.callback_query(F.data.startswith("nav_img_"))
async def handle_image_nav(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º —Ç–æ–≤–∞—Ä–∞"""
    try:
        parts = callback.data.split('_')
        product_id = int(parts[2])
        current_idx = int(parts[3])
        direction = parts[4]
        
        product = products[product_id]
        
        if direction == "next":
            new_idx = (current_idx + 1) % len(product["images"])
        elif direction == "prev":
            new_idx = (current_idx - 1) % len(product["images"])
        else:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏")
        
        await delete_previous_message(callback.message)
        await send_product_card(callback.message.chat.id, product, new_idx)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", show_alert=True)
    finally:
        await callback.answer()

@dp.callback_query(F.data == "no_action")
async def no_action(callback: types.CallbackQuery):
    """–ü—É—Å—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –±–µ–∑ –¥–µ–π—Å—Ç–≤–∏—è"""
    await callback.answer()

@dp.callback_query(F.data.startswith("color_"))
async def select_color(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–∞ —Ç–æ–≤–∞—Ä–∞"""
    try:
        parts = callback.data.split('_')
        product_id = int(parts[1])
        color = parts[2]
        product = products[product_id]
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        caption = callback.message.caption or ""
        current_idx = 0
        if "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ" in caption:
            try:
                current_idx = int(caption.split("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")[1].split("–∏–∑")[0].strip()) - 1
            except:
                current_idx = 0
        
        await callback.answer(f"–í—ã–±—Ä–∞–Ω —Ü–≤–µ—Ç: {color}", show_alert=True)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º —Ü–≤–µ—Ç–æ–º
        new_caption = (
            f"üõãÔ∏è <b>{escape(product['name'])}</b>\n\n"
            f"üì∏ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {current_idx+1} –∏–∑ {len(product['images'])}\n\n"
            f"üíµ –¶–µ–Ω–∞: {product['price']//100}‚ÇΩ\n"
            f"üé® <b>–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ü–≤–µ—Ç:</b> {escape(color)}\n\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ:\n{escape(product['description'])}"
        )
        
        await callback.message.edit_caption(
            caption=new_caption,
            reply_markup=product_kb(product_id, current_idx),
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–∞: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ü–≤–µ—Ç–∞", show_alert=True)

@dp.callback_query(F.data.startswith("add_"))
async def add_to_cart(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É"""
    try:
        product_id = int(callback.data.split('_')[1])
        user_id = callback.from_user.id
        
        if user_id not in user_carts:
            user_carts[user_id] = {}
        
        if product_id not in user_carts[user_id]:
            user_carts[user_id][product_id] = {
                "quantity": 0,
                "color": None
            }
        
        user_carts[user_id][product_id]["quantity"] += 1
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ü–≤–µ—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        caption = callback.message.caption or ""
        if "–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ü–≤–µ—Ç:" in caption:
            selected_color = caption.split("–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ü–≤–µ—Ç:")[1].split("\n")[0].strip()
            user_carts[user_id][product_id]["color"] = selected_color
        
        await callback.answer(f"{products[product_id]['name']} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É", show_alert=True)

@dp.callback_query(F.data == "cart")
async def show_cart(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫–∞–∑–∞ –∫–æ—Ä–∑–∏–Ω—ã"""
    try:
        await delete_previous_message(callback.message)
        user_id = callback.from_user.id
        
        if user_id not in user_carts or not user_carts[user_id]:
            await callback.message.answer(
                "üõí <b>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞</b>\n\n"
                "–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑.",
                reply_markup=types.InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            types.InlineKeyboardButton(text="üõãÔ∏è –í –∫–∞—Ç–∞–ª–æ–≥", callback_data="catalog"),
                            types.InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                        ]
                    ]
                ),
                parse_mode="HTML"
            )
            await callback.answer()
            return
        
        cart_text = "üõí <b>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞</b>\n\n"
        total = 0
        
        for product_id, item in user_carts[user_id].items():
            product = products[product_id]
            price = product["price"] * item["quantity"]
            total += price
            
            cart_text += f"<b>{escape(product['name'])}</b>\n"
            if item["color"]:
                cart_text += f"üé® –¶–≤–µ—Ç: {escape(item['color'])}\n"
            cart_text += f"üí∞ {product['price']//100}‚ÇΩ √ó {item['quantity']} = {price//100}‚ÇΩ\n\n"
        
        cart_text += f"üíµ <b>–ò—Ç–æ–≥–æ:</b> {total//100}‚ÇΩ"
        
        await callback.message.answer(
            cart_text,
            reply_markup=cart_kb(user_carts[user_id]),
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∫–æ—Ä–∑–∏–Ω—ã: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ—Ä–∑–∏–Ω—ã", show_alert=True)
    finally:
        await callback.answer()

@dp.callback_query(F.data == "clear_cart")
async def clear_cart(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–∏—Å—Ç–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã"""
    try:
        user_id = callback.from_user.id
        if user_id in user_carts:
            user_carts[user_id] = {}
        await callback.answer("–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞!", show_alert=True)
        await show_cart(callback)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ—Ä–∑–∏–Ω—ã", show_alert=True)

@dp.callback_query(F.data == "checkout")
async def start_checkout(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
    try:
        await delete_previous_message(callback.message)
        user_id = callback.from_user.id
        
        if user_id not in user_carts or not user_carts[user_id]:
            await callback.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!", show_alert=True)
            return
        
        await callback.message.answer(
            "üìù <b>–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏:\n"
            "(–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥, —É–ª–∏—Ü—É, –¥–æ–º –∏ –∫–≤–∞—Ä—Ç–∏—Ä—É)",
            reply_markup=types.InlineKeyboardMarkup(
                inline_keyboard=[
                    [types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data="cart")]
                ]
            ),
            parse_mode="HTML"
        )
        await state.set_state(OrderStates.WAITING_FOR_ADDRESS)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞", show_alert=True)
    finally:
        await callback.answer()

@dp.message(OrderStates.WAITING_FOR_ADDRESS)
async def process_address(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏"""
    try:
        await state.update_data(address=message.text)
        await message.answer(
            "üìû –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏:\n"
            "(–§–æ—Ä–º–∞—Ç: +79998887766)",
            reply_markup=types.InlineKeyboardMarkup(
                inline_keyboard=[
                    [types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="checkout")]
                ]
            )
        )
        await state.set_state(OrderStates.WAITING_FOR_PHONE)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–¥—Ä–µ—Å–∞: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏:"
        )

@dp.message(OrderStates.WAITING_FOR_PHONE)
async def process_phone(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
    try:
        user_id = message.from_user.id
        phone = message.text.strip()
        
        # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        if not (phone.startswith('+7') and len(phone) == 12) and not (phone.startswith('8') and len(phone) == 11):
            await message.answer(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n"
                "–§–æ—Ä–º–∞—Ç: +79998887766"
            )
            return
        
        data = await state.get_data()
        address = data.get("address")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
        order_text = generate_order_text(message.from_user, phone, address, user_carts[user_id])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
        await message.answer(
            f"‚úÖ <b>–í–∞—à –∑–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!</b>\n\n{order_text}\n\n"
            "–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
            reply_markup=main_menu_kb(),
            parse_mode="HTML"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        admin_id = os.getenv('ADMIN_ID')
        if admin_id:
            try:
                admin_text = generate_admin_order_text(
                    message.from_user, 
                    phone, 
                    address, 
                    user_carts[user_id]
                )
                
                await bot.send_message(
                    chat_id=int(admin_id.strip()),
                    text=admin_text,
                    parse_mode="HTML",
                    reply_markup=admin_order_kb(user_id, phone)
                )
                logger.info(f"–ó–∞–∫–∞–∑ #{user_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
                
            except ValueError as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ ADMIN_ID: {e}")
            except Exception as e:
                logger.exception("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É:")
        
        # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
        user_carts[user_id] = {}
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=main_menu_kb()
        )

@dp.callback_query(F.data.startswith("admin_confirm_"))
async def confirm_order(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    try:
        user_id = int(callback.data.split('_')[2])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
        await bot.send_message(
            chat_id=user_id,
            text="‚úÖ <b>–í–∞—à –∑–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!</b>\n\n"
                 "–ú—ã –Ω–∞—á–∞–ª–∏ —Å–æ–±–∏—Ä–∞—Ç—å –≤–∞—à –∑–∞–∫–∞–∑. –û–∂–∏–¥–∞–π—Ç–µ –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Å—Ä–æ–∫.",
            parse_mode="HTML"
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await callback.answer("–ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! –ö–ª–∏–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω.", show_alert=True)
        
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ –≤ –ë–î
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞", show_alert=True)

@dp.callback_query(F.data.startswith("admin_call_"))
async def call_client(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∑–≤–æ–Ω–∫–∞ –∫–ª–∏–µ–Ω—Ç—É"""
    try:
        user_id = int(callback.data.split('_')[2])
        await callback.answer(
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ –¥–ª—è –∑–≤–æ–Ω–∫–∞ –∫–ª–∏–µ–Ω—Ç—É",
            show_alert=True
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –∑–≤–æ–Ω–∫–∞: {e}")

@dp.callback_query(F.data == "contacts")
async def show_contacts(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫–∞–∑–∞ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    try:
        await delete_previous_message(callback.message)
        await callback.message.answer_photo(
            photo="https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Fpriroda.club%2Fuploads%2Fposts%2F2022-08%2F1660129024_1-priroda-club-p-krasivie-doma-na-prirode-krasivo-foto-1.jpg&f=1&nofb=1&ipt=b0676001edfb48dde41f75ef58a27c7a4d238afcd0ef1ed482f147d0591cc26e",
            caption=(
                "üìå <b>–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã</b>\n\n"
                "üè¢ <b>–ê–¥—Ä–µ—Å –º–∞–≥–∞–∑–∏–Ω–∞:</b>\n"
                "–≥. –£—Ñ–∞, —É–ª. –ì—Ä–∏–±–æ–µ–¥–æ–≤–∞, 2–∫1\n\n"
                "üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω—ã:</b>\n"
                "+7 (987) 772-63-99 - –æ—Ç–¥–µ–ª –ø—Ä–æ–¥–∞–∂\n"
                "+7 (987) 772-63-99 - —Å–ª—É–∂–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏\n\n"
                "üïí <b>–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã:</b>\n"
                "–ü–Ω-–ü—Ç: 10:00-20:00\n"
                "–°–±-–í—Å: 11:00-18:00\n\n"
                "üìç –ú—ã –Ω–∞ –∫–∞—Ä—Ç–µ: https://tinyurl.com/3mxcjxww"
            ),
            reply_markup=types.InlineKeyboardMarkup(
                inline_keyboard=[
                    [types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
                ]
            ),
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤", show_alert=True)
    finally:
        await callback.answer()

async def main():
    try:
        # –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
        await bot.delete_webhook(drop_pending_updates=True)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥ (–µ—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ–±—Ö—É–∫–∏)
        await dp.start_polling(bot)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
    finally:
        await bot.session.close()

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
